
Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b98  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a10c  0800a10c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a114  0800a114  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800a11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200000a8  0800a1c4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800a1c4  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da34  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385d  00000000  00000000  0003db0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00041370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  00042c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298e2  00000000  00000000  000443a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0d4  00000000  00000000  0006dc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea99  00000000  00000000  0008ad56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001897ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  00189840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800855c 	.word	0x0800855c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800855c 	.word	0x0800855c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b08d      	sub	sp, #52	; 0x34
 80005b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f003 f901 	bl	80037c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f95f 	bl	8000880 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 fb9b 	bl	8000cfc <MX_GPIO_Init>
	MX_DMA2D_Init();
 80005c6:	f000 f9c7 	bl	8000958 <MX_DMA2D_Init>
	MX_FMC_Init();
 80005ca:	f000 fb49 	bl	8000c60 <MX_FMC_Init>
	MX_LTDC_Init();
 80005ce:	f000 f9f5 	bl	80009bc <MX_LTDC_Init>
	MX_TIM6_Init();
 80005d2:	f000 faa5 	bl	8000b20 <MX_TIM6_Init>
	MX_USART1_UART_Init();
 80005d6:	f000 fb13 	bl	8000c00 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80005da:	f000 fad9 	bl	8000b90 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80005de:	4897      	ldr	r0, [pc, #604]	; (800083c <main+0x288>)
 80005e0:	f006 fabc 	bl	8006b5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80005e4:	4896      	ldr	r0, [pc, #600]	; (8000840 <main+0x28c>)
 80005e6:	f006 fab9 	bl	8006b5c <HAL_TIM_Base_Start_IT>
	BSP_LCD_Init();
 80005ea:	f001 fd2d 	bl	8002048 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 80005ee:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80005f2:	2001      	movs	r0, #1
 80005f4:	f001 fdc0 	bl	8002178 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f001 fe1d 	bl	8002238 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80005fe:	f001 fff3 	bl	80025e8 <BSP_LCD_DisplayOn>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000602:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000606:	f001 fe3f 	bl	8002288 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800060a:	f04f 30ff 	mov.w	r0, #4294967295
 800060e:	f001 fe23 	bl	8002258 <BSP_LCD_SetTextColor>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000612:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000616:	f001 fe6b 	bl	80022f0 <BSP_LCD_Clear>
	BSP_SDRAM_Init();
 800061a:	f002 f9fd 	bl	8002a18 <BSP_SDRAM_Init>
	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK) {
 800061e:	f001 fd83 	bl	8002128 <BSP_LCD_GetXSize>
 8000622:	4603      	mov	r3, r0
 8000624:	b29c      	uxth	r4, r3
 8000626:	f001 fd93 	bl	8002150 <BSP_LCD_GetYSize>
 800062a:	4603      	mov	r3, r0
 800062c:	b29b      	uxth	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	4620      	mov	r0, r4
 8000632:	f002 fba7 	bl	8002d84 <BSP_TS_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d01d      	beq.n	8000678 <main+0xc4>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f001 fe22 	bl	8002288 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000644:	487f      	ldr	r0, [pc, #508]	; (8000844 <main+0x290>)
 8000646:	f001 fe07 	bl	8002258 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 800064a:	f001 fd81 	bl	8002150 <BSP_LCD_GetYSize>
 800064e:	4603      	mov	r3, r0
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b5f      	subs	r3, #95	; 0x5f
 8000654:	b299      	uxth	r1, r3
 8000656:	2301      	movs	r3, #1
 8000658:	4a7b      	ldr	r2, [pc, #492]	; (8000848 <main+0x294>)
 800065a:	2000      	movs	r0, #0
 800065c:	f001 feb4 	bl	80023c8 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 8000660:	f001 fd76 	bl	8002150 <BSP_LCD_GetYSize>
 8000664:	4603      	mov	r3, r0
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b50      	subs	r3, #80	; 0x50
 800066a:	b299      	uxth	r1, r3
 800066c:	2301      	movs	r3, #1
 800066e:	4a77      	ldr	r2, [pc, #476]	; (800084c <main+0x298>)
 8000670:	2000      	movs	r0, #0
 8000672:	f001 fea9 	bl	80023c8 <BSP_LCD_DisplayStringAt>
				(uint8_t*) "TouchScreen cannot be initialized", CENTER_MODE);

		while (1)
 8000676:	e7fe      	b.n	8000676 <main+0xc2>
			;
	}
	__HAL_RCC_CRC_CLK_ENABLE();
 8000678:	4b75      	ldr	r3, [pc, #468]	; (8000850 <main+0x29c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a74      	ldr	r2, [pc, #464]	; (8000850 <main+0x29c>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
 8000684:	4b72      	ldr	r3, [pc, #456]	; (8000850 <main+0x29c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
	BSP_LCD_DisplayStringAt(10, 60, (uint8_t*) "NTUST", CENTER_MODE);
 8000690:	2301      	movs	r3, #1
 8000692:	4a70      	ldr	r2, [pc, #448]	; (8000854 <main+0x2a0>)
 8000694:	213c      	movs	r1, #60	; 0x3c
 8000696:	200a      	movs	r0, #10
 8000698:	f001 fe96 	bl	80023c8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 60, (uint8_t*) "+", RIGHT_MODE);
 800069c:	2302      	movs	r3, #2
 800069e:	4a6e      	ldr	r2, [pc, #440]	; (8000858 <main+0x2a4>)
 80006a0:	213c      	movs	r1, #60	; 0x3c
 80006a2:	200a      	movs	r0, #10
 80006a4:	f001 fe90 	bl	80023c8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 136, (uint8_t*) "-", RIGHT_MODE);
 80006a8:	2302      	movs	r3, #2
 80006aa:	4a6c      	ldr	r2, [pc, #432]	; (800085c <main+0x2a8>)
 80006ac:	2188      	movs	r1, #136	; 0x88
 80006ae:	200a      	movs	r0, #10
 80006b0:	f001 fe8a 	bl	80023c8 <BSP_LCD_DisplayStringAt>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		BSP_LCD_DisplayStringAt(10, 136, (uint8_t*) clock, CENTER_MODE);
 80006b4:	2301      	movs	r3, #1
 80006b6:	4a6a      	ldr	r2, [pc, #424]	; (8000860 <main+0x2ac>)
 80006b8:	2188      	movs	r1, #136	; 0x88
 80006ba:	200a      	movs	r0, #10
 80006bc:	f001 fe84 	bl	80023c8 <BSP_LCD_DisplayStringAt>
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11)) {
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	4867      	ldr	r0, [pc, #412]	; (8000864 <main+0x2b0>)
 80006c6:	f004 f805 	bl	80046d4 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d021      	beq.n	8000714 <main+0x160>
			HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f003 f8d3 	bl	800387c <HAL_Delay>
			while (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) != GPIO_PIN_SET)
 80006d6:	bf00      	nop
 80006d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006dc:	4861      	ldr	r0, [pc, #388]	; (8000864 <main+0x2b0>)
 80006de:	f003 fff9 	bl	80046d4 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d1f7      	bne.n	80006d8 <main+0x124>
				;
			if (mode == 3)
 80006e8:	4b5f      	ldr	r3, [pc, #380]	; (8000868 <main+0x2b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d103      	bne.n	80006f8 <main+0x144>
				mode = 0;
 80006f0:	4b5d      	ldr	r3, [pc, #372]	; (8000868 <main+0x2b4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e004      	b.n	8000702 <main+0x14e>
			else
				mode++;
 80006f8:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <main+0x2b4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a5a      	ldr	r2, [pc, #360]	; (8000868 <main+0x2b4>)
 8000700:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) != GPIO_PIN_RESET)
 8000702:	bf00      	nop
 8000704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000708:	4856      	ldr	r0, [pc, #344]	; (8000864 <main+0x2b0>)
 800070a:	f003 ffe3 	bl	80046d4 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f7      	bne.n	8000704 <main+0x150>
				;
		}

		BSP_TS_GetState(&TS_State);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fb74 	bl	8002e04 <BSP_TS_GetState>
		if (TS_State.touchEventId[0] == TOUCH_EVENT_PRESS_DOWN) {
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d1c8      	bne.n	80006b4 <main+0x100>
//			click ++;
			x = (int) TS_State.touchX[0];
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	461a      	mov	r2, r3
 8000726:	4b51      	ldr	r3, [pc, #324]	; (800086c <main+0x2b8>)
 8000728:	601a      	str	r2, [r3, #0]
			y = (int) TS_State.touchY[0];
 800072a:	8a3b      	ldrh	r3, [r7, #16]
 800072c:	461a      	mov	r2, r3
 800072e:	4b50      	ldr	r3, [pc, #320]	; (8000870 <main+0x2bc>)
 8000730:	601a      	str	r2, [r3, #0]

			if (TS_State.touchY[0] > 125 && TS_State.touchY[0] < 200
 8000732:	8a3b      	ldrh	r3, [r7, #16]
 8000734:	2b7d      	cmp	r3, #125	; 0x7d
 8000736:	d93b      	bls.n	80007b0 <main+0x1fc>
 8000738:	8a3b      	ldrh	r3, [r7, #16]
 800073a:	2bc7      	cmp	r3, #199	; 0xc7
 800073c:	d838      	bhi.n	80007b0 <main+0x1fc>
					&& TS_State.touchX[0] > 400) {
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000744:	d934      	bls.n	80007b0 <main+0x1fc>
				switch (mode) {
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <main+0x2b4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d022      	beq.n	8000794 <main+0x1e0>
 800074e:	2b03      	cmp	r3, #3
 8000750:	dc2f      	bgt.n	80007b2 <main+0x1fe>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <main+0x1a8>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d00e      	beq.n	8000778 <main+0x1c4>
 800075a:	e02a      	b.n	80007b2 <main+0x1fe>
				case 1:
					if (hr == 0)
 800075c:	4b45      	ldr	r3, [pc, #276]	; (8000874 <main+0x2c0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <main+0x1b8>
						hr = 23;
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <main+0x2c0>)
 8000766:	2217      	movs	r2, #23
 8000768:	601a      	str	r2, [r3, #0]
					else
						hr--;
					break;
 800076a:	e022      	b.n	80007b2 <main+0x1fe>
						hr--;
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <main+0x2c0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3b01      	subs	r3, #1
 8000772:	4a40      	ldr	r2, [pc, #256]	; (8000874 <main+0x2c0>)
 8000774:	6013      	str	r3, [r2, #0]
					break;
 8000776:	e01c      	b.n	80007b2 <main+0x1fe>
				case 2:
					if (min == 0)
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <main+0x2c4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <main+0x1d4>
						min = 59;
 8000780:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <main+0x2c4>)
 8000782:	223b      	movs	r2, #59	; 0x3b
 8000784:	601a      	str	r2, [r3, #0]
					else
						min--;
					break;
 8000786:	e014      	b.n	80007b2 <main+0x1fe>
						min--;
 8000788:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <main+0x2c4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <main+0x2c4>)
 8000790:	6013      	str	r3, [r2, #0]
					break;
 8000792:	e00e      	b.n	80007b2 <main+0x1fe>
				case 3:
					if (sec == 0)
 8000794:	4b39      	ldr	r3, [pc, #228]	; (800087c <main+0x2c8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <main+0x1f0>
						sec = 59;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <main+0x2c8>)
 800079e:	223b      	movs	r2, #59	; 0x3b
 80007a0:	601a      	str	r2, [r3, #0]
					else
						sec--;
					break;
 80007a2:	e006      	b.n	80007b2 <main+0x1fe>
						sec--;
 80007a4:	4b35      	ldr	r3, [pc, #212]	; (800087c <main+0x2c8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a34      	ldr	r2, [pc, #208]	; (800087c <main+0x2c8>)
 80007ac:	6013      	str	r3, [r2, #0]
					break;
 80007ae:	e000      	b.n	80007b2 <main+0x1fe>
				}
			}
 80007b0:	bf00      	nop
			if (TS_State.touchY[0] > 50 && TS_State.touchY[0] < 125
 80007b2:	8a3b      	ldrh	r3, [r7, #16]
 80007b4:	2b32      	cmp	r3, #50	; 0x32
 80007b6:	d93b      	bls.n	8000830 <main+0x27c>
 80007b8:	8a3b      	ldrh	r3, [r7, #16]
 80007ba:	2b7c      	cmp	r3, #124	; 0x7c
 80007bc:	d838      	bhi.n	8000830 <main+0x27c>
					&& TS_State.touchX[0] > 400) {
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007c4:	d934      	bls.n	8000830 <main+0x27c>
				switch (mode) {
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <main+0x2b4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d022      	beq.n	8000814 <main+0x260>
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	dc2f      	bgt.n	8000832 <main+0x27e>
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d002      	beq.n	80007dc <main+0x228>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d00e      	beq.n	80007f8 <main+0x244>
 80007da:	e02a      	b.n	8000832 <main+0x27e>
				case 1:
					if (hr == 23)
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <main+0x2c0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b17      	cmp	r3, #23
 80007e2:	d103      	bne.n	80007ec <main+0x238>
						hr = 0;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0x2c0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
					else
						hr++;
					break;
 80007ea:	e022      	b.n	8000832 <main+0x27e>
						hr++;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <main+0x2c0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <main+0x2c0>)
 80007f4:	6013      	str	r3, [r2, #0]
					break;
 80007f6:	e01c      	b.n	8000832 <main+0x27e>
				case 2:
					if (min == 59)
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <main+0x2c4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b3b      	cmp	r3, #59	; 0x3b
 80007fe:	d103      	bne.n	8000808 <main+0x254>
						min = 0;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <main+0x2c4>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
					else
						min++;
					break;
 8000806:	e014      	b.n	8000832 <main+0x27e>
						min++;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x2c4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a1a      	ldr	r2, [pc, #104]	; (8000878 <main+0x2c4>)
 8000810:	6013      	str	r3, [r2, #0]
					break;
 8000812:	e00e      	b.n	8000832 <main+0x27e>
				case 3:
					if (sec == 59)
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <main+0x2c8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b3b      	cmp	r3, #59	; 0x3b
 800081a:	d103      	bne.n	8000824 <main+0x270>
						sec = 0;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <main+0x2c8>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
					else
						sec++;
					break;
 8000822:	e006      	b.n	8000832 <main+0x27e>
						sec++;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <main+0x2c8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <main+0x2c8>)
 800082c:	6013      	str	r3, [r2, #0]
					break;
 800082e:	e000      	b.n	8000832 <main+0x27e>
				}
			}
 8000830:	bf00      	nop
			//BSP_TS_ResetTouchData(&TS_State);
			HAL_Delay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f003 f822 	bl	800387c <HAL_Delay>
		BSP_LCD_DisplayStringAt(10, 136, (uint8_t*) clock, CENTER_MODE);
 8000838:	e73c      	b.n	80006b4 <main+0x100>
 800083a:	bf00      	nop
 800083c:	200001ac 	.word	0x200001ac
 8000840:	200001f8 	.word	0x200001f8
 8000844:	ffff0000 	.word	0xffff0000
 8000848:	08008574 	.word	0x08008574
 800084c:	0800857c 	.word	0x0800857c
 8000850:	40023800 	.word	0x40023800
 8000854:	080085a0 	.word	0x080085a0
 8000858:	080085a8 	.word	0x080085a8
 800085c:	080085ac 	.word	0x080085ac
 8000860:	20000300 	.word	0x20000300
 8000864:	40022000 	.word	0x40022000
 8000868:	20000340 	.word	0x20000340
 800086c:	20000348 	.word	0x20000348
 8000870:	2000034c 	.word	0x2000034c
 8000874:	20000000 	.word	0x20000000
 8000878:	2000033c 	.word	0x2000033c
 800087c:	20000338 	.word	0x20000338

08000880 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f007 f9ee 	bl	8007c70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <SystemClock_Config+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a29      	ldr	r2, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <SystemClock_Config+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <SystemClock_Config+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a24      	ldr	r2, [pc, #144]	; (8000954 <SystemClock_Config+0xd4>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 80008ec:	23d8      	movs	r3, #216	; 0xd8
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 ffcb 	bl	8005898 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x8c>
		Error_Handler();
 8000908:	f000 feaa 	bl	8001660 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800090c:	f004 ff74 	bl	80057f8 <HAL_PWREx_EnableOverDrive>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
		Error_Handler();
 8000916:	f000 fea3 	bl	8001660 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000926:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2107      	movs	r1, #7
 8000938:	4618      	mov	r0, r3
 800093a:	f005 fa51 	bl	8005de0 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc8>
		Error_Handler();
 8000944:	f000 fe8c 	bl	8001660 <Error_Handler>
	}
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_DMA2D_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 800098e:	f003 fa69 	bl	8003e64 <HAL_DMA2D_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000998:	f000 fe62 	bl	8001660 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800099c:	2101      	movs	r1, #1
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_DMA2D_Init+0x5c>)
 80009a0:	f003 fbbe 	bl	8004120 <HAL_DMA2D_ConfigLayer>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DMA2D_Init+0x56>
		Error_Handler();
 80009aa:	f000 fe59 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	4002b000 	.word	0x4002b000

080009bc <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09a      	sub	sp, #104	; 0x68
 80009c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80009c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c6:	2234      	movs	r2, #52	; 0x34
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 f950 	bl	8007c70 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = { 0 };
 80009d0:	463b      	mov	r3, r7
 80009d2:	2234      	movs	r2, #52	; 0x34
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 f94a 	bl	8007c70 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80009dc:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009de:	4a4f      	ldr	r2, [pc, #316]	; (8000b1c <MX_LTDC_Init+0x160>)
 80009e0:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009e8:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ee:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009f4:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 80009fa:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <MX_LTDC_Init+0x15c>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 8000a00:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a08:	220e      	movs	r2, #14
 8000a0a:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8000a0c:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a0e:	2205      	movs	r2, #5
 8000a10:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 8000a12:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a14:	f240 228e 	movw	r2, #654	; 0x28e
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a1c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 660;
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a24:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 487;
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a2c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000a4a:	4833      	ldr	r0, [pc, #204]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000a4c:	f004 fc1e 	bl	800528c <HAL_LTDC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_LTDC_Init+0x9e>
		Error_Handler();
 8000a56:	f000 fe03 	bl	8001660 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.WindowX1 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.WindowY0 = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
	pLayerCfg.WindowY1 = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
	pLayerCfg.Alpha = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
	pLayerCfg.Alpha0 = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	653b      	str	r3, [r7, #80]	; 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
	pLayerCfg.FBStartAdress = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	65bb      	str	r3, [r7, #88]	; 0x58
	pLayerCfg.ImageWidth = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	65fb      	str	r3, [r7, #92]	; 0x5c
	pLayerCfg.ImageHeight = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	663b      	str	r3, [r7, #96]	; 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	pLayerCfg.Backcolor.Green = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	pLayerCfg.Backcolor.Red = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000aa8:	f004 fcc0 	bl	800542c <HAL_LTDC_ConfigLayer>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_LTDC_Init+0xfa>
		Error_Handler();
 8000ab2:	f000 fdd5 	bl	8001660 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg1.ImageWidth = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg1.ImageHeight = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	pLayerCfg1.Backcolor.Red = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 8000afa:	463b      	mov	r3, r7
 8000afc:	2201      	movs	r2, #1
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_LTDC_Init+0x15c>)
 8000b02:	f004 fc93 	bl	800542c <HAL_LTDC_ConfigLayer>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_LTDC_Init+0x154>
		Error_Handler();
 8000b0c:	f000 fda8 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3768      	adds	r7, #104	; 0x68
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000104 	.word	0x20000104
 8000b1c:	40016800 	.word	0x40016800

08000b20 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b34:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 10799;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b38:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000b3c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4999;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b46:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b4a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b54:	f005 ffab 	bl	8006aae <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM6_Init+0x42>
		Error_Handler();
 8000b5e:	f000 fd7f 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b70:	f006 fa54 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000b7a:	f000 fd71 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001ac 	.word	0x200001ac
 8000b8c:	40001000 	.word	0x40001000

08000b90 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <MX_TIM7_Init+0x6c>)
 8000ba4:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 10799;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000ba8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000bac:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 2499;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000bb6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bba:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000bc4:	f005 ff73 	bl	8006aae <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM7_Init+0x42>
		Error_Handler();
 8000bce:	f000 fd47 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM7_Init+0x68>)
 8000be0:	f006 fa1c 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM7_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000bea:	f000 fd39 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001f8 	.word	0x200001f8
 8000bfc:	40001400 	.word	0x40001400

08000c00 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c06:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <MX_USART1_UART_Init+0x5c>)
 8000c08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART1_UART_Init+0x58>)
 8000c44:	f006 fa96 	bl	8007174 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000c4e:	f000 fd07 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000244 	.word	0x20000244
 8000c5c:	40011000 	.word	0x40011000

08000c60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_FMC_Init+0x98>)
 8000c7c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c92:	2210      	movs	r2, #16
 8000c94:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_FMC_Init+0x94>)
 8000cdc:	f005 fe56 	bl	800698c <HAL_SDRAM_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_FMC_Init+0x8a>
		Error_Handler();
 8000ce6:	f000 fcbb 	bl	8001660 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002cc 	.word	0x200002cc
 8000cf8:	a0000140 	.word	0xa0000140

08000cfc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b090      	sub	sp, #64	; 0x40
 8000d00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d12:	4bad      	ldr	r3, [pc, #692]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4aac      	ldr	r2, [pc, #688]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4baa      	ldr	r3, [pc, #680]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	4ba7      	ldr	r3, [pc, #668]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4aa6      	ldr	r2, [pc, #664]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4ba4      	ldr	r3, [pc, #656]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4ba1      	ldr	r3, [pc, #644]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4aa0      	ldr	r2, [pc, #640]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b9e      	ldr	r3, [pc, #632]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	4b9b      	ldr	r3, [pc, #620]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a9a      	ldr	r2, [pc, #616]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b98      	ldr	r3, [pc, #608]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b95      	ldr	r3, [pc, #596]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a94      	ldr	r2, [pc, #592]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a8e      	ldr	r2, [pc, #568]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a88      	ldr	r2, [pc, #544]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b86      	ldr	r3, [pc, #536]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000dba:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a82      	ldr	r2, [pc, #520]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd2:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a7c      	ldr	r2, [pc, #496]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000dea:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a76      	ldr	r2, [pc, #472]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a70      	ldr	r2, [pc, #448]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <MX_GPIO_Init+0x2cc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	486b      	ldr	r0, [pc, #428]	; (8000fcc <MX_GPIO_Init+0x2d0>)
 8000e20:	f003 fc70 	bl	8004704 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 8000e24:	2200      	movs	r2, #0
 8000e26:	f241 010c 	movw	r1, #4108	; 0x100c
 8000e2a:	4869      	ldr	r0, [pc, #420]	; (8000fd0 <MX_GPIO_Init+0x2d4>)
 8000e2c:	f003 fc6a 	bl	8004704 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2108      	movs	r1, #8
 8000e34:	4867      	ldr	r0, [pc, #412]	; (8000fd4 <MX_GPIO_Init+0x2d8>)
 8000e36:	f003 fc65 	bl	8004704 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	4865      	ldr	r0, [pc, #404]	; (8000fd8 <MX_GPIO_Init+0x2dc>)
 8000e42:	f003 fc5f 	bl	8004704 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8000e46:	2200      	movs	r2, #0
 8000e48:	21c8      	movs	r1, #200	; 0xc8
 8000e4a:	4864      	ldr	r0, [pc, #400]	; (8000fdc <MX_GPIO_Init+0x2e0>)
 8000e4c:	f003 fc5a 	bl	8004704 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000e50:	2308      	movs	r3, #8
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	485f      	ldr	r0, [pc, #380]	; (8000fe0 <MX_GPIO_Init+0x2e4>)
 8000e64:	f003 fa8a 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4857      	ldr	r0, [pc, #348]	; (8000fe0 <MX_GPIO_Init+0x2e4>)
 8000e84:	f003 fa7a 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8000e88:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	484d      	ldr	r0, [pc, #308]	; (8000fdc <MX_GPIO_Init+0x2e0>)
 8000ea6:	f003 fa69 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4847      	ldr	r0, [pc, #284]	; (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000ec8:	f003 fa58 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 8000ecc:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	483e      	ldr	r0, [pc, #248]	; (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000eea:	f003 fa47 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f06:	4619      	mov	r1, r3
 8000f08:	4836      	ldr	r0, [pc, #216]	; (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000f0a:	f003 fa37 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4828      	ldr	r0, [pc, #160]	; (8000fcc <MX_GPIO_Init+0x2d0>)
 8000f2a:	f003 fa27 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 8000f2e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f40:	230c      	movs	r3, #12
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4827      	ldr	r0, [pc, #156]	; (8000fe8 <MX_GPIO_Init+0x2ec>)
 8000f4c:	f003 fa16 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f62:	2301      	movs	r3, #1
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481f      	ldr	r0, [pc, #124]	; (8000fec <MX_GPIO_Init+0x2f0>)
 8000f6e:	f003 fa05 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f82:	230d      	movs	r3, #13
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x2e4>)
 8000f8e:	f003 f9f5 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000fae:	f003 f9e5 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	e013      	b.n	8000ff0 <MX_GPIO_Init+0x2f4>
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40022000 	.word	0x40022000
 8000fd4:	40022800 	.word	0x40022800
 8000fd8:	40021c00 	.word	0x40021c00
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	48bc      	ldr	r0, [pc, #752]	; (80012e4 <MX_GPIO_Init+0x5e8>)
 8000ff2:	f003 f9c3 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	48b7      	ldr	r0, [pc, #732]	; (80012e8 <MX_GPIO_Init+0x5ec>)
 800100c:	f003 f9b6 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8001010:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001022:	230a      	movs	r3, #10
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	48af      	ldr	r0, [pc, #700]	; (80012ec <MX_GPIO_Init+0x5f0>)
 800102e:	f003 f9a5 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 8001032:	23f0      	movs	r3, #240	; 0xf0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001042:	230a      	movs	r3, #10
 8001044:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	48a8      	ldr	r0, [pc, #672]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 800104e:	f003 f995 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001064:	230a      	movs	r3, #10
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	48a1      	ldr	r0, [pc, #644]	; (80012f4 <MX_GPIO_Init+0x5f8>)
 8001070:	f003 f984 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4897      	ldr	r0, [pc, #604]	; (80012e8 <MX_GPIO_Init+0x5ec>)
 800108c:	f003 f976 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001090:	2308      	movs	r3, #8
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010a0:	230d      	movs	r3, #13
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	4619      	mov	r1, r3
 80010aa:	488f      	ldr	r0, [pc, #572]	; (80012e8 <MX_GPIO_Init+0x5ec>)
 80010ac:	f003 f966 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 80010b0:	f241 030c 	movw	r3, #4108	; 0x100c
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4889      	ldr	r0, [pc, #548]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 80010ca:	f003 f957 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4885      	ldr	r0, [pc, #532]	; (80012f8 <MX_GPIO_Init+0x5fc>)
 80010e4:	f003 f94a 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010e8:	2308      	movs	r3, #8
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fc:	4619      	mov	r1, r3
 80010fe:	487f      	ldr	r0, [pc, #508]	; (80012fc <MX_GPIO_Init+0x600>)
 8001100:	f003 f93c 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001116:	230d      	movs	r3, #13
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4874      	ldr	r0, [pc, #464]	; (80012f4 <MX_GPIO_Init+0x5f8>)
 8001122:	f003 f92b 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001126:	2310      	movs	r3, #16
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001136:	4619      	mov	r1, r3
 8001138:	486b      	ldr	r0, [pc, #428]	; (80012e8 <MX_GPIO_Init+0x5ec>)
 800113a:	f003 f91f 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800113e:	2304      	movs	r3, #4
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800114e:	230c      	movs	r3, #12
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	4863      	ldr	r0, [pc, #396]	; (80012e8 <MX_GPIO_Init+0x5ec>)
 800115a:	f003 f90f 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800115e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4863      	ldr	r0, [pc, #396]	; (8001300 <MX_GPIO_Init+0x604>)
 8001174:	f003 f902 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001178:	2302      	movs	r3, #2
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001188:	2305      	movs	r3, #5
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4857      	ldr	r0, [pc, #348]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 8001194:	f003 f8f2 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4853      	ldr	r0, [pc, #332]	; (8001300 <MX_GPIO_Init+0x604>)
 80011b2:	f003 f8e3 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 80011b6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c8:	230d      	movs	r3, #13
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	484b      	ldr	r0, [pc, #300]	; (8001300 <MX_GPIO_Init+0x604>)
 80011d4:	f003 f8d2 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011e8:	2302      	movs	r3, #2
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	4619      	mov	r1, r3
 80011f2:	483f      	ldr	r0, [pc, #252]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 80011f4:	f003 f8c2 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : PI11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4838      	ldr	r0, [pc, #224]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 800120e:	f003 f8b5 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001224:	2301      	movs	r3, #1
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122c:	4619      	mov	r1, r3
 800122e:	482f      	ldr	r0, [pc, #188]	; (80012ec <MX_GPIO_Init+0x5f0>)
 8001230:	f003 f8a4 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001248:	4619      	mov	r1, r3
 800124a:	4829      	ldr	r0, [pc, #164]	; (80012f0 <MX_GPIO_Init+0x5f4>)
 800124c:	f003 f896 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8001250:	23c0      	movs	r3, #192	; 0xc0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001260:	2308      	movs	r3, #8
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4823      	ldr	r0, [pc, #140]	; (80012f8 <MX_GPIO_Init+0x5fc>)
 800126c:	f003 f886 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001270:	2310      	movs	r3, #16
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001280:	230a      	movs	r3, #10
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_GPIO_Init+0x604>)
 800128c:	f003 f876 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001290:	23c8      	movs	r3, #200	; 0xc8
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_GPIO_Init+0x5f8>)
 80012a8:	f003 f868 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 80012ac:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012be:	4619      	mov	r1, r3
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <MX_GPIO_Init+0x608>)
 80012c2:	f003 f85b 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 80012c6:	2305      	movs	r3, #5
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012d6:	230a      	movs	r3, #10
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012de:	4619      	mov	r1, r3
 80012e0:	e012      	b.n	8001308 <MX_GPIO_Init+0x60c>
 80012e2:	bf00      	nop
 80012e4:	40022400 	.word	0x40022400
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40022800 	.word	0x40022800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40021400 	.word	0x40021400
 8001308:	4858      	ldr	r0, [pc, #352]	; (800146c <MX_GPIO_Init+0x770>)
 800130a:	f003 f837 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800130e:	2332      	movs	r3, #50	; 0x32
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131e:	230b      	movs	r3, #11
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001326:	4619      	mov	r1, r3
 8001328:	4850      	ldr	r0, [pc, #320]	; (800146c <MX_GPIO_Init+0x770>)
 800132a:	f003 f827 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800133e:	2309      	movs	r3, #9
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001346:	4619      	mov	r1, r3
 8001348:	4849      	ldr	r0, [pc, #292]	; (8001470 <MX_GPIO_Init+0x774>)
 800134a:	f003 f817 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800134e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001360:	2309      	movs	r3, #9
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001368:	4619      	mov	r1, r3
 800136a:	4842      	ldr	r0, [pc, #264]	; (8001474 <MX_GPIO_Init+0x778>)
 800136c:	f003 f806 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001370:	2304      	movs	r3, #4
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001380:	4619      	mov	r1, r3
 8001382:	483d      	ldr	r0, [pc, #244]	; (8001478 <MX_GPIO_Init+0x77c>)
 8001384:	f002 fffa 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001388:	2386      	movs	r3, #134	; 0x86
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001398:	230b      	movs	r3, #11
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	4836      	ldr	r0, [pc, #216]	; (800147c <MX_GPIO_Init+0x780>)
 80013a4:	f002 ffea 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4830      	ldr	r0, [pc, #192]	; (800147c <MX_GPIO_Init+0x780>)
 80013bc:	f002 ffde 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 80013c0:	2350      	movs	r3, #80	; 0x50
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013d0:	230d      	movs	r3, #13
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	4619      	mov	r1, r3
 80013da:	4828      	ldr	r0, [pc, #160]	; (800147c <MX_GPIO_Init+0x780>)
 80013dc:	f002 ffce 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin | LCD_SDA_Pin;
 80013e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013f2:	2304      	movs	r3, #4
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <MX_GPIO_Init+0x784>)
 80013fe:	f002 ffbd 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001402:	2328      	movs	r3, #40	; 0x28
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001412:	230a      	movs	r3, #10
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <MX_GPIO_Init+0x780>)
 800141e:	f002 ffad 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001422:	2340      	movs	r3, #64	; 0x40
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001432:	2309      	movs	r3, #9
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <MX_GPIO_Init+0x784>)
 800143e:	f002 ff9d 	bl	800437c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8001442:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001454:	2305      	movs	r3, #5
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0x774>)
 8001460:	f002 ff8c 	bl	800437c <HAL_GPIO_Init>

}
 8001464:	bf00      	nop
 8001466:	3740      	adds	r7, #64	; 0x40
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020800 	.word	0x40020800
 8001470:	40020400 	.word	0x40020400
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021800 	.word	0x40021800
 800147c:	40020000 	.word	0x40020000
 8001480:	40021c00 	.word	0x40021c00

08001484 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance && mode == 0) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d13f      	bne.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001498:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d13b      	bne.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x94>

		if (count == 2) {
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d107      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x34>
			sec++;
 80014a8:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a62      	ldr	r2, [pc, #392]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014b0:	6013      	str	r3, [r2, #0]
			count = 0;
 80014b2:	4b60      	ldr	r3, [pc, #384]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
		}
		if (sec == 60) {
 80014b8:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b3c      	cmp	r3, #60	; 0x3c
 80014be:	d107      	bne.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			min++;
 80014c0:	4b5e      	ldr	r3, [pc, #376]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a5d      	ldr	r2, [pc, #372]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014c8:	6013      	str	r3, [r2, #0]
			sec = 0;
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
		}
		if (min == 60) {
 80014d0:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b3c      	cmp	r3, #60	; 0x3c
 80014d6:	d107      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x64>
			hr++;
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014e0:	6013      	str	r3, [r2, #0]
			min = 0;
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
		}
		if (hr == 24) {
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b18      	cmp	r3, #24
 80014ee:	d102      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x72>
			hr = 0;
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
		}

		count++;
 80014f6:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014fe:	6013      	str	r3, [r2, #0]

		sprintf(clock, "%02d : %02d : %02d", hr, min, sec);
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	460b      	mov	r3, r1
 8001510:	494c      	ldr	r1, [pc, #304]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001512:	484d      	ldr	r0, [pc, #308]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001514:	f006 fbb4 	bl	8007c80 <siprintf>
	}

	if (htim->Instance == htim7.Instance) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d17f      	bne.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		switch (mode) {
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d054      	beq.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x152>
 800152c:	2b03      	cmp	r3, #3
 800152e:	dc79      	bgt.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d002      	beq.n	800153a <HAL_TIM_PeriodElapsedCallback+0xb6>
 8001534:	2b02      	cmp	r3, #2
 8001536:	d027      	beq.n	8001588 <HAL_TIM_PeriodElapsedCallback+0x104>
	 sprintf(clock, "%02d : %02d : %02d", hr, min, sec);
	 }

	 }
	 }*/
}
 8001538:	e074      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			if (blink == 1)
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d103      	bne.n	800154a <HAL_TIM_PeriodElapsedCallback+0xc6>
				blink = 0;
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e004      	b.n	8001554 <HAL_TIM_PeriodElapsedCallback+0xd0>
				blink++;
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a3f      	ldr	r2, [pc, #252]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001552:	6013      	str	r3, [r2, #0]
			if (blink) {
 8001554:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_TIM_PeriodElapsedCallback+0xea>
				sprintf(clock, "   : %02d : %02d", min, sec);
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	493b      	ldr	r1, [pc, #236]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001568:	f006 fb8a 	bl	8007c80 <siprintf>
			break;
 800156c:	e05a      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				sprintf(clock, "%02d : %02d : %02d", hr, min, sec);
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	460b      	mov	r3, r1
 800157e:	4931      	ldr	r1, [pc, #196]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001580:	4831      	ldr	r0, [pc, #196]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001582:	f006 fb7d 	bl	8007c80 <siprintf>
			break;
 8001586:	e04d      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			if (blink == 1)
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d103      	bne.n	8001598 <HAL_TIM_PeriodElapsedCallback+0x114>
				blink = 0;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e004      	b.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x11e>
				blink++;
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]
			if (blink) {
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x138>
				sprintf(clock, "%02d :    : %02d", hr, sec);
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4929      	ldr	r1, [pc, #164]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015b6:	f006 fb63 	bl	8007c80 <siprintf>
			break;
 80015ba:	e033      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				sprintf(clock, "%02d : %02d : %02d", hr, min, sec);
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	460b      	mov	r3, r1
 80015cc:	491d      	ldr	r1, [pc, #116]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015d0:	f006 fb56 	bl	8007c80 <siprintf>
			break;
 80015d4:	e026      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			if (blink == 1)
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d103      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x162>
				blink = 0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e004      	b.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x16c>
				blink++;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015ee:	6013      	str	r3, [r2, #0]
			if (blink) {
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_TIM_PeriodElapsedCallback+0x186>
				sprintf(clock, "%02d : %02d :   ", hr, min);
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001604:	f006 fb3c 	bl	8007c80 <siprintf>
}
 8001608:	e00c      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				sprintf(clock, "%02d : %02d : %02d", hr, min, sec);
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	460b      	mov	r3, r1
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800161e:	f006 fb2f 	bl	8007c80 <siprintf>
}
 8001622:	e7ff      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001ac 	.word	0x200001ac
 8001630:	20000340 	.word	0x20000340
 8001634:	20000334 	.word	0x20000334
 8001638:	20000338 	.word	0x20000338
 800163c:	2000033c 	.word	0x2000033c
 8001640:	20000000 	.word	0x20000000
 8001644:	080085b0 	.word	0x080085b0
 8001648:	20000300 	.word	0x20000300
 800164c:	200001f8 	.word	0x200001f8
 8001650:	20000344 	.word	0x20000344
 8001654:	080085c4 	.word	0x080085c4
 8001658:	080085d8 	.word	0x080085d8
 800165c:	080085ec 	.word	0x080085ec

08001660 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_MspInit+0x44>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_MspInit+0x44>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_MspInit+0x44>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_MspInit+0x44>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_MspInit+0x44>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_MspInit+0x44>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_DMA2D_MspInit+0x38>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_DMA2D_MspInit+0x3c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_DMA2D_MspInit+0x3c>)
 80016cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_DMA2D_MspInit+0x3c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	4002b000 	.word	0x4002b000
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0ae      	sub	sp, #184	; 0xb8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	2284      	movs	r2, #132	; 0x84
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f006 faab 	bl	8007c70 <memset>
  if(hltdc->Instance==LTDC)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_LTDC_MspInit+0x1d4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f040 80cc 	bne.w	80018be <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001726:	2308      	movs	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800172a:	2332      	movs	r3, #50	; 0x32
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800172e:	2302      	movs	r3, #2
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001732:	2302      	movs	r3, #2
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800173e:	2300      	movs	r3, #0
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fd30 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001752:	f7ff ff85 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 800175c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a56      	ldr	r2, [pc, #344]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b54      	ldr	r3, [pc, #336]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a44      	ldr	r2, [pc, #272]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a3e      	ldr	r2, [pc, #248]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_LTDC_MspInit+0x1d8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80017e6:	2310      	movs	r3, #16
 80017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fe:	230e      	movs	r3, #14
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001808:	4619      	mov	r1, r3
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <HAL_LTDC_MspInit+0x1dc>)
 800180c:	f002 fdb6 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001810:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182a:	230e      	movs	r3, #14
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001830:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001834:	4619      	mov	r1, r3
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <HAL_LTDC_MspInit+0x1e0>)
 8001838:	f002 fda0 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800183c:	23f7      	movs	r3, #247	; 0xf7
 800183e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001854:	230e      	movs	r3, #14
 8001856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800185a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800185e:	4619      	mov	r1, r3
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <HAL_LTDC_MspInit+0x1e4>)
 8001862:	f002 fd8b 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001880:	2309      	movs	r3, #9
 8001882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800188a:	4619      	mov	r1, r3
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <HAL_LTDC_MspInit+0x1e8>)
 800188e:	f002 fd75 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001892:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018ac:	230e      	movs	r3, #14
 80018ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <HAL_LTDC_MspInit+0x1ec>)
 80018ba:	f002 fd5f 	bl	800437c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	37b8      	adds	r7, #184	; 0xb8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40016800 	.word	0x40016800
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40022400 	.word	0x40022400
 80018d8:	40022800 	.word	0x40022800
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d114      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f002 f8b1 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001918:	2036      	movs	r0, #54	; 0x36
 800191a:	f002 f8ca 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800191e:	e018      	b.n	8001952 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_TIM_Base_MspInit+0x80>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 8001930:	f043 0320 	orr.w	r3, r3, #32
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 0320 	and.w	r3, r3, #32
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2037      	movs	r0, #55	; 0x37
 8001948:	f002 f897 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800194c:	2037      	movs	r0, #55	; 0x37
 800194e:	f002 f8b0 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40001000 	.word	0x40001000
 8001960:	40023800 	.word	0x40023800
 8001964:	40001400 	.word	0x40001400

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ac      	sub	sp, #176	; 0xb0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	2284      	movs	r2, #132	; 0x84
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f006 f971 	bl	8007c70 <memset>
  if(huart->Instance==USART1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <HAL_UART_MspInit+0xf4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d15c      	bne.n	8001a52 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800199c:	2300      	movs	r3, #0
 800199e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fc01 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff fe56 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6453      	str	r3, [r2, #68]	; 0x44
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_UART_MspInit+0xf8>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <HAL_UART_MspInit+0xfc>)
 8001a22:	f002 fcab 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a40:	2307      	movs	r3, #7
 8001a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4806      	ldr	r0, [pc, #24]	; (8001a68 <HAL_UART_MspInit+0x100>)
 8001a4e:	f002 fc95 	bl	800437c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	37b0      	adds	r7, #176	; 0xb0
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <HAL_FMC_MspInit+0x100>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d16d      	bne.n	8001b64 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_FMC_MspInit+0x100>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_FMC_MspInit+0x104>)
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_FMC_MspInit+0x104>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6393      	str	r3, [r2, #56]	; 0x38
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_FMC_MspInit+0x104>)
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001aa6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001aaa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ab8:	230c      	movs	r3, #12
 8001aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	482c      	ldr	r0, [pc, #176]	; (8001b74 <HAL_FMC_MspInit+0x108>)
 8001ac2:	f002 fc5b 	bl	800437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001ac6:	f248 1333 	movw	r3, #33075	; 0x8133
 8001aca:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4825      	ldr	r0, [pc, #148]	; (8001b78 <HAL_FMC_MspInit+0x10c>)
 8001ae2:	f002 fc4b 	bl	800437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001ae6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001aea:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af8:	230c      	movs	r3, #12
 8001afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_FMC_MspInit+0x110>)
 8001b02:	f002 fc3b 	bl	800437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b0a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4817      	ldr	r0, [pc, #92]	; (8001b80 <HAL_FMC_MspInit+0x114>)
 8001b22:	f002 fc2b 	bl	800437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b26:	2328      	movs	r3, #40	; 0x28
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b36:	230c      	movs	r3, #12
 8001b38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4811      	ldr	r0, [pc, #68]	; (8001b84 <HAL_FMC_MspInit+0x118>)
 8001b40:	f002 fc1c 	bl	800437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001b44:	2308      	movs	r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b54:	230c      	movs	r3, #12
 8001b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480a      	ldr	r0, [pc, #40]	; (8001b88 <HAL_FMC_MspInit+0x11c>)
 8001b5e:	f002 fc0d 	bl	800437c <HAL_GPIO_Init>
 8001b62:	e000      	b.n	8001b66 <HAL_FMC_MspInit+0xfa>
    return;
 8001b64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000350 	.word	0x20000350
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40021800 	.word	0x40021800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40020800 	.word	0x40020800

08001b8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b94:	f7ff ff6a 	bl	8001a6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bec:	f001 fe26 	bl	800383c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM6_DAC_IRQHandler+0x10>)
 8001bfa:	f005 f827 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001ac 	.word	0x200001ac

08001c08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM7_IRQHandler+0x10>)
 8001c0e:	f005 f81d 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200001f8 	.word	0x200001f8

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f005 ffe6 	bl	8007c1c <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20050000 	.word	0x20050000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000354 	.word	0x20000354
 8001c84:	20000648 	.word	0x20000648

08001c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb2:	490e      	ldr	r1, [pc, #56]	; (8001cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc8:	4c0b      	ldr	r4, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd6:	f7ff ffd7 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f005 ffa5 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7fe fc69 	bl	80005b4 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001cf0:	0800a11c 	.word	0x0800a11c
  ldr r2, =_sbss
 8001cf4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001cf8:	20000644 	.word	0x20000644

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <I2Cx_MspInit+0x150>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d14d      	bne.n	8001dac <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4845      	ldr	r0, [pc, #276]	; (8001e58 <I2Cx_MspInit+0x158>)
 8001d44:	f002 fb1a 	bl	800437c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	4840      	ldr	r0, [pc, #256]	; (8001e58 <I2Cx_MspInit+0x158>)
 8001d56:	f002 fb11 	bl	800437c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001d84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d88:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	2048      	movs	r0, #72	; 0x48
 8001d90:	f001 fe73 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001d94:	2048      	movs	r0, #72	; 0x48
 8001d96:	f001 fe8c 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	2049      	movs	r0, #73	; 0x49
 8001da0:	f001 fe6b 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001da4:	2049      	movs	r0, #73	; 0x49
 8001da6:	f001 fe84 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001daa:	e04d      	b.n	8001e48 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	481e      	ldr	r0, [pc, #120]	; (8001e5c <I2Cx_MspInit+0x15c>)
 8001de2:	f002 facb 	bl	800437c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	481a      	ldr	r0, [pc, #104]	; (8001e5c <I2Cx_MspInit+0x15c>)
 8001df4:	f002 fac2 	bl	800437c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <I2Cx_MspInit+0x154>)
 8001e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e26:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	201f      	movs	r0, #31
 8001e2e:	f001 fe24 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001e32:	201f      	movs	r0, #31
 8001e34:	f001 fe3d 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	f001 fe1c 	bl	8003a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001e42:	2020      	movs	r0, #32
 8001e44:	f001 fe35 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000358 	.word	0x20000358
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021c00 	.word	0x40021c00
 8001e5c:	40020400 	.word	0x40020400

08001e60 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f002 ff67 	bl	8004d3c <HAL_I2C_GetState>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d125      	bne.n	8001ec0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <I2Cx_Init+0x68>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <I2Cx_Init+0x6c>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e002      	b.n	8001e8a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <I2Cx_Init+0x70>)
 8001e88:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <I2Cx_Init+0x74>)
 8001e8e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff23 	bl	8001d00 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f002 fc3c 	bl	8004738 <HAL_I2C_Init>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000358 	.word	0x20000358
 8001ecc:	40005c00 	.word	0x40005c00
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40912732 	.word	0x40912732

08001ed8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	72fb      	strb	r3, [r7, #11]
 8001eea:	460b      	mov	r3, r1
 8001eec:	813b      	strh	r3, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	88f8      	ldrh	r0, [r7, #6]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f002 fdfa 	bl	8004b08 <HAL_I2C_Mem_Read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	4619      	mov	r1, r3
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f832 	bl	8001f8c <I2Cx_Error>
  }
  return status;    
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08a      	sub	sp, #40	; 0x28
 8001f36:	af04      	add	r7, sp, #16
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	4608      	mov	r0, r1
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	72fb      	strb	r3, [r7, #11]
 8001f44:	460b      	mov	r3, r1
 8001f46:	813b      	strh	r3, [r7, #8]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	88f8      	ldrh	r0, [r7, #6]
 8001f56:	893a      	ldrh	r2, [r7, #8]
 8001f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	4603      	mov	r3, r0
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f002 fcb9 	bl	80048e0 <HAL_I2C_Mem_Write>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f805 	bl	8001f8c <I2Cx_Error>
  }
  return status;
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f002 fc5d 	bl	8004858 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff5e 	bl	8001e60 <I2Cx_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TS_IO_Init+0x10>)
 8001fb2:	f7ff ff55 	bl	8001e60 <I2Cx_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000358 	.word	0x20000358

08001fc0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	71bb      	strb	r3, [r7, #6]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	79f9      	ldrb	r1, [r7, #7]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	1d7b      	adds	r3, r7, #5
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <TS_IO_Write+0x30>)
 8001fe4:	f7ff ffa5 	bl	8001f32 <I2Cx_WriteMultiple>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000358 	.word	0x20000358

08001ff4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	b29a      	uxth	r2, r3
 800200c:	79f9      	ldrb	r1, [r7, #7]
 800200e:	2301      	movs	r3, #1
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f107 030f 	add.w	r3, r7, #15
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <TS_IO_Read+0x38>)
 800201c:	f7ff ff5c 	bl	8001ed8 <I2Cx_ReadMultiple>

  return read_value;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000358 	.word	0x20000358

08002030 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f001 fc1f 	bl	800387c <HAL_Delay>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <BSP_LCD_Init+0xcc>)
 800204e:	2228      	movs	r2, #40	; 0x28
 8002050:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002054:	2209      	movs	r2, #9
 8002056:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <BSP_LCD_Init+0xcc>)
 800205a:	2235      	movs	r2, #53	; 0x35
 800205c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002060:	220b      	movs	r2, #11
 8002062:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002066:	f240 121b 	movw	r2, #283	; 0x11b
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <BSP_LCD_Init+0xcc>)
 800206e:	f240 2215 	movw	r2, #533	; 0x215
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002076:	f240 121d 	movw	r2, #285	; 0x11d
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <BSP_LCD_Init+0xcc>)
 800207e:	f240 2235 	movw	r2, #565	; 0x235
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002084:	2100      	movs	r1, #0
 8002086:	4823      	ldr	r0, [pc, #140]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002088:	f000 fba6 	bl	80027d8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <BSP_LCD_Init+0xcc>)
 800208e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002092:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <BSP_LCD_Init+0xcc>)
 8002096:	f44f 7288 	mov.w	r2, #272	; 0x110
 800209a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <BSP_LCD_Init+0xcc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <BSP_LCD_Init+0xd0>)
 80020d0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80020d2:	4810      	ldr	r0, [pc, #64]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020d4:	f003 f9e8 	bl	80054a8 <HAL_LTDC_GetState>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80020de:	2100      	movs	r1, #0
 80020e0:	480c      	ldr	r0, [pc, #48]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020e2:	f000 fa9f 	bl	8002624 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <BSP_LCD_Init+0xcc>)
 80020e8:	f003 f8d0 	bl	800528c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <BSP_LCD_Init+0xd4>)
 80020f4:	f002 fb06 	bl	8004704 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2108      	movs	r1, #8
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <BSP_LCD_Init+0xd8>)
 80020fe:	f002 fb01 	bl	8004704 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002102:	f000 fc89 	bl	8002a18 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <BSP_LCD_Init+0xdc>)
 8002108:	f000 f8d8 	bl	80022bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200003ac 	.word	0x200003ac
 8002118:	40016800 	.word	0x40016800
 800211c:	40022000 	.word	0x40022000
 8002120:	40022800 	.word	0x40022800
 8002124:	20000034 	.word	0x20000034

08002128 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <BSP_LCD_GetXSize+0x20>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <BSP_LCD_GetXSize+0x24>)
 8002132:	2134      	movs	r1, #52	; 0x34
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3360      	adds	r3, #96	; 0x60
 800213c:	681b      	ldr	r3, [r3, #0]
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000494 	.word	0x20000494
 800214c:	200003ac 	.word	0x200003ac

08002150 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <BSP_LCD_GetYSize+0x20>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <BSP_LCD_GetYSize+0x24>)
 800215a:	2134      	movs	r1, #52	; 0x34
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3364      	adds	r3, #100	; 0x64
 8002164:	681b      	ldr	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	20000494 	.word	0x20000494
 8002174:	200003ac 	.word	0x200003ac

08002178 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002178:	b580      	push	{r7, lr}
 800217a:	b090      	sub	sp, #64	; 0x40
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002188:	f7ff ffce 	bl	8002128 <BSP_LCD_GetXSize>
 800218c:	4603      	mov	r3, r0
 800218e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002194:	f7ff ffdc 	bl	8002150 <BSP_LCD_GetYSize>
 8002198:	4603      	mov	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80021a4:	23ff      	movs	r3, #255	; 0xff
 80021a6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021c4:	2307      	movs	r3, #7
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80021c8:	f7ff ffae 	bl	8002128 <BSP_LCD_GetXSize>
 80021cc:	4603      	mov	r3, r0
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80021d0:	f7ff ffbe 	bl	8002150 <BSP_LCD_GetYSize>
 80021d4:	4603      	mov	r3, r0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4812      	ldr	r0, [pc, #72]	; (800222c <BSP_LCD_LayerDefaultInit+0xb4>)
 80021e2:	f003 f923 	bl	800542c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	4911      	ldr	r1, [pc, #68]	; (8002230 <BSP_LCD_LayerDefaultInit+0xb8>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3304      	adds	r3, #4
 80021f6:	f04f 32ff 	mov.w	r2, #4294967295
 80021fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	490c      	ldr	r1, [pc, #48]	; (8002230 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3308      	adds	r3, #8
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <BSP_LCD_LayerDefaultInit+0xbc>)
 800220e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	4907      	ldr	r1, [pc, #28]	; (8002230 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	3740      	adds	r7, #64	; 0x40
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200003ac 	.word	0x200003ac
 8002230:	20000498 	.word	0x20000498
 8002234:	20000034 	.word	0x20000034

08002238 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <BSP_LCD_SelectLayer+0x1c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
} 
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000494 	.word	0x20000494

08002258 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <BSP_LCD_SetTextColor+0x28>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <BSP_LCD_SetTextColor+0x2c>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000494 	.word	0x20000494
 8002284:	20000498 	.word	0x20000498

08002288 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <BSP_LCD_SetBackColor+0x2c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4908      	ldr	r1, [pc, #32]	; (80022b8 <BSP_LCD_SetBackColor+0x30>)
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3304      	adds	r3, #4
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000494 	.word	0x20000494
 80022b8:	20000498 	.word	0x20000498

080022bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <BSP_LCD_SetFont+0x2c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4908      	ldr	r1, [pc, #32]	; (80022ec <BSP_LCD_SetFont+0x30>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3308      	adds	r3, #8
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000494 	.word	0x20000494
 80022ec:	20000498 	.word	0x20000498

080022f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <BSP_LCD_Clear+0x48>)
 80022fa:	681c      	ldr	r4, [r3, #0]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <BSP_LCD_Clear+0x48>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <BSP_LCD_Clear+0x4c>)
 8002302:	2134      	movs	r1, #52	; 0x34
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461e      	mov	r6, r3
 8002310:	f7ff ff0a 	bl	8002128 <BSP_LCD_GetXSize>
 8002314:	4605      	mov	r5, r0
 8002316:	f7ff ff1b 	bl	8002150 <BSP_LCD_GetYSize>
 800231a:	4602      	mov	r2, r0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2300      	movs	r3, #0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	462a      	mov	r2, r5
 8002328:	4631      	mov	r1, r6
 800232a:	4620      	mov	r0, r4
 800232c:	f000 fb28 	bl	8002980 <LL_FillBuffer>
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002338:	20000494 	.word	0x20000494
 800233c:	200003ac 	.word	0x200003ac

08002340 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
 800234a:	460b      	mov	r3, r1
 800234c:	80bb      	strh	r3, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <BSP_LCD_DisplayChar+0x80>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <BSP_LCD_DisplayChar+0x84>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3308      	adds	r3, #8
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <BSP_LCD_DisplayChar+0x80>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4c14      	ldr	r4, [pc, #80]	; (80023c4 <BSP_LCD_DisplayChar+0x84>)
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4423      	add	r3, r4
 800237e:	3308      	adds	r3, #8
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002384:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <BSP_LCD_DisplayChar+0x80>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4c0d      	ldr	r4, [pc, #52]	; (80023c4 <BSP_LCD_DisplayChar+0x84>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4423      	add	r3, r4
 8002398:	3308      	adds	r3, #8
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	889b      	ldrh	r3, [r3, #4]
 800239e:	3307      	adds	r3, #7
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da00      	bge.n	80023a6 <BSP_LCD_DisplayChar+0x66>
 80023a4:	3307      	adds	r3, #7
 80023a6:	10db      	asrs	r3, r3, #3
 80023a8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023ac:	18ca      	adds	r2, r1, r3
 80023ae:	88b9      	ldrh	r1, [r7, #4]
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa2c 	bl	8002810 <DrawChar>
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	20000494 	.word	0x20000494
 80023c4:	20000498 	.word	0x20000498

080023c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	81fb      	strh	r3, [r7, #14]
 80023d6:	460b      	mov	r3, r1
 80023d8:	81bb      	strh	r3, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80023de:	2301      	movs	r3, #1
 80023e0:	83fb      	strh	r3, [r7, #30]
 80023e2:	2300      	movs	r3, #0
 80023e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80023f2:	e002      	b.n	80023fa <BSP_LCD_DisplayStringAt+0x32>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	3301      	adds	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	617a      	str	r2, [r7, #20]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f6      	bne.n	80023f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002406:	f7ff fe8f 	bl	8002128 <BSP_LCD_GetXSize>
 800240a:	4601      	mov	r1, r0
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4850      	ldr	r0, [pc, #320]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4403      	add	r3, r0
 800241c:	3308      	adds	r3, #8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	889b      	ldrh	r3, [r3, #4]
 8002422:	fbb1 f3f3 	udiv	r3, r1, r3
 8002426:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d01c      	beq.n	8002468 <BSP_LCD_DisplayStringAt+0xa0>
 800242e:	2b03      	cmp	r3, #3
 8002430:	dc33      	bgt.n	800249a <BSP_LCD_DisplayStringAt+0xd2>
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <BSP_LCD_DisplayStringAt+0x74>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d019      	beq.n	800246e <BSP_LCD_DisplayStringAt+0xa6>
 800243a:	e02e      	b.n	800249a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad1      	subs	r1, r2, r3
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4843      	ldr	r0, [pc, #268]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4403      	add	r3, r0
 8002452:	3308      	adds	r3, #8
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	89fb      	ldrh	r3, [r7, #14]
 8002462:	4413      	add	r3, r2
 8002464:	83fb      	strh	r3, [r7, #30]
      break;
 8002466:	e01b      	b.n	80024a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	83fb      	strh	r3, [r7, #30]
      break;
 800246c:	e018      	b.n	80024a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b299      	uxth	r1, r3
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4836      	ldr	r0, [pc, #216]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4403      	add	r3, r0
 8002486:	3308      	adds	r3, #8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	889b      	ldrh	r3, [r3, #4]
 800248c:	fb11 f303 	smulbb	r3, r1, r3
 8002490:	b29a      	uxth	r2, r3
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	83fb      	strh	r3, [r7, #30]
      break;
 8002498:	e002      	b.n	80024a0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	83fb      	strh	r3, [r7, #30]
      break;
 800249e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80024a0:	8bfb      	ldrh	r3, [r7, #30]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <BSP_LCD_DisplayStringAt+0xe6>
 80024a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da1d      	bge.n	80024ea <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024b2:	e01a      	b.n	80024ea <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	89b9      	ldrh	r1, [r7, #12]
 80024ba:	8bfb      	ldrh	r3, [r7, #30]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff3f 	bl	8002340 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4923      	ldr	r1, [pc, #140]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3308      	adds	r3, #8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	889a      	ldrh	r2, [r3, #4]
 80024d8:	8bfb      	ldrh	r3, [r7, #30]
 80024da:	4413      	add	r3, r2
 80024dc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
    i++;
 80024e4:	8bbb      	ldrh	r3, [r7, #28]
 80024e6:	3301      	adds	r3, #1
 80024e8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	2300      	moveq	r3, #0
 80024f6:	b2dc      	uxtb	r4, r3
 80024f8:	f7ff fe16 	bl	8002128 <BSP_LCD_GetXSize>
 80024fc:	8bb9      	ldrh	r1, [r7, #28]
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4d14      	ldr	r5, [pc, #80]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	442b      	add	r3, r5
 800250e:	3308      	adds	r3, #8
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	889b      	ldrh	r3, [r3, #4]
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	1ac3      	subs	r3, r0, r3
 800251a:	b299      	uxth	r1, r3
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <BSP_LCD_DisplayStringAt+0x188>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <BSP_LCD_DisplayStringAt+0x18c>)
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3308      	adds	r3, #8
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	889b      	ldrh	r3, [r3, #4]
 8002532:	4299      	cmp	r1, r3
 8002534:	bf2c      	ite	cs
 8002536:	2301      	movcs	r3, #1
 8002538:	2300      	movcc	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4023      	ands	r3, r4
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1b7      	bne.n	80024b4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bdb0      	pop	{r4, r5, r7, pc}
 800254e:	bf00      	nop
 8002550:	20000494 	.word	0x20000494
 8002554:	20000498 	.word	0x20000498

08002558 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	603a      	str	r2, [r7, #0]
 8002562:	80fb      	strh	r3, [r7, #6]
 8002564:	460b      	mov	r3, r1
 8002566:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <BSP_LCD_DrawPixel+0x88>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <BSP_LCD_DrawPixel+0x8c>)
 800256e:	2134      	movs	r1, #52	; 0x34
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3348      	adds	r3, #72	; 0x48
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d116      	bne.n	80025ac <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <BSP_LCD_DrawPixel+0x88>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <BSP_LCD_DrawPixel+0x8c>)
 8002584:	2134      	movs	r1, #52	; 0x34
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	335c      	adds	r3, #92	; 0x5c
 800258e:	681c      	ldr	r4, [r3, #0]
 8002590:	88bd      	ldrh	r5, [r7, #4]
 8002592:	f7ff fdc9 	bl	8002128 <BSP_LCD_GetXSize>
 8002596:	4603      	mov	r3, r0
 8002598:	fb03 f205 	mul.w	r2, r3, r5
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4423      	add	r3, r4
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b292      	uxth	r2, r2
 80025a8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80025aa:	e015      	b.n	80025d8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <BSP_LCD_DrawPixel+0x88>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <BSP_LCD_DrawPixel+0x8c>)
 80025b2:	2134      	movs	r1, #52	; 0x34
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	335c      	adds	r3, #92	; 0x5c
 80025bc:	681c      	ldr	r4, [r3, #0]
 80025be:	88bd      	ldrh	r5, [r7, #4]
 80025c0:	f7ff fdb2 	bl	8002128 <BSP_LCD_GetXSize>
 80025c4:	4603      	mov	r3, r0
 80025c6:	fb03 f205 	mul.w	r2, r3, r5
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4423      	add	r3, r4
 80025d2:	461a      	mov	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	20000494 	.word	0x20000494
 80025e4:	200003ac 	.word	0x200003ac

080025e8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <BSP_LCD_DisplayOn+0x30>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <BSP_LCD_DisplayOn+0x30>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002602:	4806      	ldr	r0, [pc, #24]	; (800261c <BSP_LCD_DisplayOn+0x34>)
 8002604:	f002 f87e 	bl	8004704 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002608:	2201      	movs	r2, #1
 800260a:	2108      	movs	r1, #8
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <BSP_LCD_DisplayOn+0x38>)
 800260e:	f002 f879 	bl	8004704 <HAL_GPIO_WritePin>
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200003ac 	.word	0x200003ac
 800261c:	40022000 	.word	0x40022000
 8002620:	40022800 	.word	0x40022800

08002624 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	; 0x40
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a63      	ldr	r2, [pc, #396]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002646:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a5d      	ldr	r2, [pc, #372]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 800264c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800265e:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a57      	ldr	r2, [pc, #348]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b55      	ldr	r3, [pc, #340]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002676:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 800267c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <BSP_LCD_MspInit+0x19c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002706:	2310      	movs	r3, #16
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002712:	2302      	movs	r3, #2
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002716:	230e      	movs	r3, #14
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800271a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271e:	4619      	mov	r1, r3
 8002720:	4828      	ldr	r0, [pc, #160]	; (80027c4 <BSP_LCD_MspInit+0x1a0>)
 8002722:	f001 fe2b 	bl	800437c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002730:	2309      	movs	r3, #9
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002738:	4619      	mov	r1, r3
 800273a:	4823      	ldr	r0, [pc, #140]	; (80027c8 <BSP_LCD_MspInit+0x1a4>)
 800273c:	f001 fe1e 	bl	800437c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002740:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800274a:	230e      	movs	r3, #14
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800274e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002752:	4619      	mov	r1, r3
 8002754:	481d      	ldr	r0, [pc, #116]	; (80027cc <BSP_LCD_MspInit+0x1a8>)
 8002756:	f001 fe11 	bl	800437c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800275a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002764:	230e      	movs	r3, #14
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276c:	4619      	mov	r1, r3
 800276e:	4818      	ldr	r0, [pc, #96]	; (80027d0 <BSP_LCD_MspInit+0x1ac>)
 8002770:	f001 fe04 	bl	800437c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002774:	23f7      	movs	r3, #247	; 0xf7
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800277c:	230e      	movs	r3, #14
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002784:	4619      	mov	r1, r3
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <BSP_LCD_MspInit+0x1b0>)
 8002788:	f001 fdf8 	bl	800437c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <BSP_LCD_MspInit+0x1a8>)
 800279e:	f001 fded 	bl	800437c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80027a2:	2308      	movs	r3, #8
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	4619      	mov	r1, r3
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <BSP_LCD_MspInit+0x1b0>)
 80027b2:	f001 fde3 	bl	800437c <HAL_GPIO_Init>
}
 80027b6:	bf00      	nop
 80027b8:	3740      	adds	r7, #64	; 0x40
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40022400 	.word	0x40022400
 80027d4:	40022800 	.word	0x40022800

080027d8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <BSP_LCD_ClockConfig+0x34>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <BSP_LCD_ClockConfig+0x34>)
 80027ea:	22c0      	movs	r2, #192	; 0xc0
 80027ec:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <BSP_LCD_ClockConfig+0x34>)
 80027f0:	2205      	movs	r2, #5
 80027f2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <BSP_LCD_ClockConfig+0x34>)
 80027f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80027fc:	4803      	ldr	r0, [pc, #12]	; (800280c <BSP_LCD_ClockConfig+0x34>)
 80027fe:	f003 fcd5 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200004b0 	.word	0x200004b0

08002810 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	603a      	str	r2, [r7, #0]
 800281a:	80fb      	strh	r3, [r7, #6]
 800281c:	460b      	mov	r3, r1
 800281e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <DrawChar+0x168>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4953      	ldr	r1, [pc, #332]	; (800297c <DrawChar+0x16c>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3308      	adds	r3, #8
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <DrawChar+0x168>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <DrawChar+0x16c>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3308      	adds	r3, #8
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002858:	8a3b      	ldrh	r3, [r7, #16]
 800285a:	3307      	adds	r3, #7
 800285c:	2b00      	cmp	r3, #0
 800285e:	da00      	bge.n	8002862 <DrawChar+0x52>
 8002860:	3307      	adds	r3, #7
 8002862:	10db      	asrs	r3, r3, #3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8a3b      	ldrh	r3, [r7, #16]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e076      	b.n	8002966 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002878:	8a3b      	ldrh	r3, [r7, #16]
 800287a:	3307      	adds	r3, #7
 800287c:	2b00      	cmp	r3, #0
 800287e:	da00      	bge.n	8002882 <DrawChar+0x72>
 8002880:	3307      	adds	r3, #7
 8002882:	10db      	asrs	r3, r3, #3
 8002884:	461a      	mov	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4413      	add	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002892:	8a3b      	ldrh	r3, [r7, #16]
 8002894:	3307      	adds	r3, #7
 8002896:	2b00      	cmp	r3, #0
 8002898:	da00      	bge.n	800289c <DrawChar+0x8c>
 800289a:	3307      	adds	r3, #7
 800289c:	10db      	asrs	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <DrawChar+0x98>
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d004      	beq.n	80028b0 <DrawChar+0xa0>
 80028a6:	e00c      	b.n	80028c2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
      break;
 80028ae:	e016      	b.n	80028de <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	3201      	adds	r2, #1
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
      break;
 80028c0:	e00d      	b.n	80028de <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3301      	adds	r3, #1
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4313      	orrs	r3, r2
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	3202      	adds	r2, #2
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
      break;
 80028dc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e036      	b.n	8002952 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80028e4:	8a3a      	ldrh	r2, [r7, #16]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	4413      	add	r3, r2
 80028ee:	3b01      	subs	r3, #1
 80028f0:	2201      	movs	r2, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	b29a      	uxth	r2, r3
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	4413      	add	r3, r2
 8002908:	b298      	uxth	r0, r3
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <DrawChar+0x168>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	491b      	ldr	r1, [pc, #108]	; (800297c <DrawChar+0x16c>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	4619      	mov	r1, r3
 8002920:	f7ff fe1a 	bl	8002558 <BSP_LCD_DrawPixel>
 8002924:	e012      	b.n	800294c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	b29a      	uxth	r2, r3
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4413      	add	r3, r2
 800292e:	b298      	uxth	r0, r3
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <DrawChar+0x168>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4911      	ldr	r1, [pc, #68]	; (800297c <DrawChar+0x16c>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3304      	adds	r3, #4
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	88bb      	ldrh	r3, [r7, #4]
 8002946:	4619      	mov	r1, r3
 8002948:	f7ff fe06 	bl	8002558 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3301      	adds	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	8a3b      	ldrh	r3, [r7, #16]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3c4      	bcc.n	80028e4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	3301      	adds	r3, #1
 800295e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	3301      	adds	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	8a7b      	ldrh	r3, [r7, #18]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	429a      	cmp	r2, r3
 800296c:	d384      	bcc.n	8002878 <DrawChar+0x68>
  }
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000494 	.word	0x20000494
 800297c:	20000498 	.word	0x20000498

08002980 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <LL_FillBuffer+0x88>)
 8002990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002994:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <LL_FillBuffer+0x8c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <LL_FillBuffer+0x90>)
 800299c:	2134      	movs	r1, #52	; 0x34
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3348      	adds	r3, #72	; 0x48
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d103      	bne.n	80029b4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <LL_FillBuffer+0x88>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	e002      	b.n	80029ba <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <LL_FillBuffer+0x88>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <LL_FillBuffer+0x88>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <LL_FillBuffer+0x88>)
 80029c2:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <LL_FillBuffer+0x94>)
 80029c4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80029c6:	4810      	ldr	r0, [pc, #64]	; (8002a08 <LL_FillBuffer+0x88>)
 80029c8:	f001 fa4c 	bl	8003e64 <HAL_DMA2D_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d115      	bne.n	80029fe <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <LL_FillBuffer+0x88>)
 80029d6:	f001 fba3 	bl	8004120 <HAL_DMA2D_ConfigLayer>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10e      	bne.n	80029fe <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	4807      	ldr	r0, [pc, #28]	; (8002a08 <LL_FillBuffer+0x88>)
 80029ec:	f001 fa84 	bl	8003ef8 <HAL_DMA2D_Start>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029f6:	210a      	movs	r1, #10
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <LL_FillBuffer+0x88>)
 80029fa:	f001 faa8 	bl	8003f4e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000454 	.word	0x20000454
 8002a0c:	20000494 	.word	0x20000494
 8002a10:	200003ac 	.word	0x200003ac
 8002a14:	4002b000 	.word	0x4002b000

08002a18 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <BSP_SDRAM_Init+0xb0>)
 8002a20:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a30:	2204      	movs	r2, #4
 8002a32:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a36:	2207      	movs	r2, #7
 8002a38:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a42:	2202      	movs	r2, #2
 8002a44:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a48:	2202      	movs	r2, #2
 8002a4a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a60:	2210      	movs	r2, #16
 8002a62:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a70:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a8e:	2100      	movs	r1, #0
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a92:	f000 f87f 	bl	8002b94 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a96:	490d      	ldr	r1, [pc, #52]	; (8002acc <BSP_SDRAM_Init+0xb4>)
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <BSP_SDRAM_Init+0xac>)
 8002a9a:	f003 ff77 	bl	800698c <HAL_SDRAM_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <BSP_SDRAM_Init+0xb8>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e002      	b.n	8002ab2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <BSP_SDRAM_Init+0xb8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ab2:	f240 6003 	movw	r0, #1539	; 0x603
 8002ab6:	f000 f80d 	bl	8002ad4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <BSP_SDRAM_Init+0xb8>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000534 	.word	0x20000534
 8002ac8:	a0000140 	.word	0xa0000140
 8002acc:	20000568 	.word	0x20000568
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae8:	2210      	movs	r2, #16
 8002aea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afc:	4923      	ldr	r1, [pc, #140]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afe:	4824      	ldr	r0, [pc, #144]	; (8002b90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b00:	f003 ff78 	bl	80069f4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f000 feb9 	bl	800387c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b12:	2210      	movs	r2, #16
 8002b14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b26:	4919      	ldr	r1, [pc, #100]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b28:	4819      	ldr	r0, [pc, #100]	; (8002b90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b2a:	f003 ff63 	bl	80069f4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b30:	2203      	movs	r2, #3
 8002b32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b36:	2210      	movs	r2, #16
 8002b38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4a:	4910      	ldr	r1, [pc, #64]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b4c:	4810      	ldr	r0, [pc, #64]	; (8002b90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b4e:	f003 ff51 	bl	80069f4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002b52:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b60:	2210      	movs	r2, #16
 8002b62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b74:	4905      	ldr	r1, [pc, #20]	; (8002b8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b78:	f003 ff3c 	bl	80069f4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4804      	ldr	r0, [pc, #16]	; (8002b90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b80:	f003 ff6d 	bl	8006a5e <HAL_SDRAM_ProgramRefreshRate>
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000584 	.word	0x20000584
 8002b90:	20000534 	.word	0x20000534

08002b94 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b090      	sub	sp, #64	; 0x40
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b9e:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a6f      	ldr	r2, [pc, #444]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6393      	str	r3, [r2, #56]	; 0x38
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4b64      	ldr	r3, [pc, #400]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be6:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a51      	ldr	r2, [pc, #324]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <BSP_SDRAM_MspInit+0x1cc>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c66:	2302      	movs	r3, #2
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002c6e:	2308      	movs	r3, #8
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c76:	4619      	mov	r1, r3
 8002c78:	483a      	ldr	r0, [pc, #232]	; (8002d64 <BSP_SDRAM_MspInit+0x1d0>)
 8002c7a:	f001 fb7f 	bl	800437c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002c7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4837      	ldr	r0, [pc, #220]	; (8002d68 <BSP_SDRAM_MspInit+0x1d4>)
 8002c8c:	f001 fb76 	bl	800437c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4833      	ldr	r0, [pc, #204]	; (8002d6c <BSP_SDRAM_MspInit+0x1d8>)
 8002c9e:	f001 fb6d 	bl	800437c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ca2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cac:	4619      	mov	r1, r3
 8002cae:	4830      	ldr	r0, [pc, #192]	; (8002d70 <BSP_SDRAM_MspInit+0x1dc>)
 8002cb0:	f001 fb64 	bl	800437c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002cb4:	f248 1333 	movw	r3, #33075	; 0x8133
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	482c      	ldr	r0, [pc, #176]	; (8002d74 <BSP_SDRAM_MspInit+0x1e0>)
 8002cc2:	f001 fb5b 	bl	800437c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002cc6:	2328      	movs	r3, #40	; 0x28
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4829      	ldr	r0, [pc, #164]	; (8002d78 <BSP_SDRAM_MspInit+0x1e4>)
 8002cd2:	f001 fb53 	bl	800437c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002cfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d00:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d0e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d18:	2203      	movs	r2, #3
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <BSP_SDRAM_MspInit+0x1ec>)
 8002d2c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d3a:	4810      	ldr	r0, [pc, #64]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d3c:	f000 ff82 	bl	8003c44 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d40:	480e      	ldr	r0, [pc, #56]	; (8002d7c <BSP_SDRAM_MspInit+0x1e8>)
 8002d42:	f000 fed1 	bl	8003ae8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	210f      	movs	r1, #15
 8002d4a:	2038      	movs	r0, #56	; 0x38
 8002d4c:	f000 fe95 	bl	8003a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d50:	2038      	movs	r0, #56	; 0x38
 8002d52:	f000 feae 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3740      	adds	r7, #64	; 0x40
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020800 	.word	0x40020800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40021400 	.word	0x40021400
 8002d74:	40021800 	.word	0x40021800
 8002d78:	40021c00 	.word	0x40021c00
 8002d7c:	20000594 	.word	0x20000594
 8002d80:	40026410 	.word	0x40026410

08002d84 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	80fb      	strh	r3, [r7, #6]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <BSP_TS_Init+0x68>)
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002d9e:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <BSP_TS_Init+0x6c>)
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <BSP_TS_Init+0x70>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2070      	movs	r0, #112	; 0x70
 8002daa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <BSP_TS_Init+0x70>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2070      	movs	r0, #112	; 0x70
 8002db2:	4798      	blx	r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b51      	cmp	r3, #81	; 0x51
 8002db8:	d111      	bne.n	8002dde <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <BSP_TS_Init+0x74>)
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <BSP_TS_Init+0x70>)
 8002dbe:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <BSP_TS_Init+0x78>)
 8002dc2:	2270      	movs	r2, #112	; 0x70
 8002dc4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <BSP_TS_Init+0x7c>)
 8002dc8:	2208      	movs	r2, #8
 8002dca:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <BSP_TS_Init+0x74>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <BSP_TS_Init+0x78>)
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
 8002ddc:	e001      	b.n	8002de2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002dde:	2303      	movs	r3, #3
 8002de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200005f8 	.word	0x200005f8
 8002df0:	200005fa 	.word	0x200005fa
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	200005f4 	.word	0x200005f4
 8002dfc:	200005fd 	.word	0x200005fd
 8002e00:	200005fc 	.word	0x200005fc

08002e04 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b097      	sub	sp, #92	; 0x5c
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002e1e:	4bb4      	ldr	r3, [pc, #720]	; (80030f0 <BSP_TS_GetState+0x2ec>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4ab3      	ldr	r2, [pc, #716]	; (80030f4 <BSP_TS_GetState+0x2f0>)
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4798      	blx	r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8196 	beq.w	800316c <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e44:	e185      	b.n	8003152 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002e46:	4baa      	ldr	r3, [pc, #680]	; (80030f0 <BSP_TS_GetState+0x2ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4aa9      	ldr	r2, [pc, #676]	; (80030f4 <BSP_TS_GetState+0x2f0>)
 8002e4e:	7812      	ldrb	r2, [r2, #0]
 8002e50:	b290      	uxth	r0, r2
 8002e52:	f107 0120 	add.w	r1, r7, #32
 8002e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e58:	0052      	lsls	r2, r2, #1
 8002e5a:	188c      	adds	r4, r1, r2
 8002e5c:	f107 0114 	add.w	r1, r7, #20
 8002e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e62:	0052      	lsls	r2, r2, #1
 8002e64:	440a      	add	r2, r1
 8002e66:	4621      	mov	r1, r4
 8002e68:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002e6a:	4ba3      	ldr	r3, [pc, #652]	; (80030f8 <BSP_TS_GetState+0x2f4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d117      	bne.n	8002ea2 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8002e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	3350      	adds	r3, #80	; 0x50
 8002e78:	443b      	add	r3, r7
 8002e7a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	3350      	adds	r3, #80	; 0x50
 8002e84:	443b      	add	r3, r7
 8002e86:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	3350      	adds	r3, #80	; 0x50
 8002e90:	443b      	add	r3, r7
 8002e92:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	3350      	adds	r3, #80	; 0x50
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002ea2:	4b95      	ldr	r3, [pc, #596]	; (80030f8 <BSP_TS_GetState+0x2f4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	3350      	adds	r3, #80	; 0x50
 8002eb4:	443b      	add	r3, r7
 8002eb6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002eba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	3350      	adds	r3, #80	; 0x50
 8002ec6:	443b      	add	r3, r7
 8002ec8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	; (80030f8 <BSP_TS_GetState+0x2f4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00e      	beq.n	8002ef6 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	443b      	add	r3, r7
 8002ee0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002ee4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	3350      	adds	r3, #80	; 0x50
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002ef6:	4b80      	ldr	r3, [pc, #512]	; (80030f8 <BSP_TS_GetState+0x2f4>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8002f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	3350      	adds	r3, #80	; 0x50
 8002f08:	443b      	add	r3, r7
 8002f0a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	3350      	adds	r3, #80	; 0x50
 8002f14:	443b      	add	r3, r7
 8002f16:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3350      	adds	r3, #80	; 0x50
 8002f20:	443b      	add	r3, r7
 8002f22:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	3350      	adds	r3, #80	; 0x50
 8002f2c:	443b      	add	r3, r7
 8002f2e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	3350      	adds	r3, #80	; 0x50
 8002f38:	443b      	add	r3, r7
 8002f3a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4a6e      	ldr	r2, [pc, #440]	; (80030fc <BSP_TS_GetState+0x2f8>)
 8002f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	d90d      	bls.n	8002f68 <BSP_TS_GetState+0x164>
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	3350      	adds	r3, #80	; 0x50
 8002f52:	443b      	add	r3, r7
 8002f54:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002f58:	4968      	ldr	r1, [pc, #416]	; (80030fc <BSP_TS_GetState+0x2f8>)
 8002f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	e00c      	b.n	8002f82 <BSP_TS_GetState+0x17e>
 8002f68:	4a64      	ldr	r2, [pc, #400]	; (80030fc <BSP_TS_GetState+0x2f8>)
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	3350      	adds	r3, #80	; 0x50
 8002f78:	443b      	add	r3, r7
 8002f7a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	3350      	adds	r3, #80	; 0x50
 8002f8c:	443b      	add	r3, r7
 8002f8e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4a5a      	ldr	r2, [pc, #360]	; (8003100 <BSP_TS_GetState+0x2fc>)
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d90d      	bls.n	8002fbc <BSP_TS_GetState+0x1b8>
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	3350      	adds	r3, #80	; 0x50
 8002fa6:	443b      	add	r3, r7
 8002fa8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002fac:	4954      	ldr	r1, [pc, #336]	; (8003100 <BSP_TS_GetState+0x2fc>)
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	e00c      	b.n	8002fd6 <BSP_TS_GetState+0x1d2>
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <BSP_TS_GetState+0x2fc>)
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	3350      	adds	r3, #80	; 0x50
 8002fcc:	443b      	add	r3, r7
 8002fce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8002fda:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fe2:	4413      	add	r3, r2
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	dd15      	ble.n	8003014 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	3350      	adds	r3, #80	; 0x50
 8002fee:	443b      	add	r3, r7
 8002ff0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4a41      	ldr	r2, [pc, #260]	; (80030fc <BSP_TS_GetState+0x2f8>)
 8002ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	3350      	adds	r3, #80	; 0x50
 8003004:	443b      	add	r3, r7
 8003006:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800300a:	4619      	mov	r1, r3
 800300c:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <BSP_TS_GetState+0x2fc>)
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <BSP_TS_GetState+0x2f0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d119      	bne.n	8003050 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 800301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	3350      	adds	r3, #80	; 0x50
 8003022:	443b      	add	r3, r7
 8003024:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	460a      	mov	r2, r1
 8003032:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	3350      	adds	r3, #80	; 0x50
 800303a:	443b      	add	r3, r7
 800303c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	3304      	adds	r3, #4
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	460a      	mov	r2, r1
 800304c:	809a      	strh	r2, [r3, #4]
 800304e:	e022      	b.n	8003096 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003050:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <BSP_TS_GetState+0x300>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	4a29      	ldr	r2, [pc, #164]	; (80030fc <BSP_TS_GetState+0x2f8>)
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	0b1b      	lsrs	r3, r3, #12
 8003064:	b299      	uxth	r1, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	460a      	mov	r2, r1
 8003070:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <BSP_TS_GetState+0x304>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <BSP_TS_GetState+0x2fc>)
 800307a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	0b1b      	lsrs	r3, r3, #12
 8003086:	b299      	uxth	r1, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308c:	3304      	adds	r3, #4
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	460a      	mov	r2, r1
 8003094:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <BSP_TS_GetState+0x2f0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b298      	uxth	r0, r3
 800309c:	f107 010c 	add.w	r1, r7, #12
 80030a0:	f107 0210 	add.w	r2, r7, #16
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	460b      	mov	r3, r1
 80030ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80030ae:	f000 faaf 	bl	8003610 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	b2d9      	uxtb	r1, r3
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	4413      	add	r3, r2
 80030bc:	3316      	adds	r3, #22
 80030be:	460a      	mov	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	b2d9      	uxtb	r1, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ca:	4413      	add	r3, r2
 80030cc:	3320      	adds	r3, #32
 80030ce:	460a      	mov	r2, r1
 80030d0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d835      	bhi.n	8003144 <BSP_TS_GetState+0x340>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <BSP_TS_GetState+0x2dc>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	0800311b 	.word	0x0800311b
 80030e8:	08003129 	.word	0x08003129
 80030ec:	08003137 	.word	0x08003137
 80030f0:	200005f4 	.word	0x200005f4
 80030f4:	200005fd 	.word	0x200005fd
 80030f8:	200005fc 	.word	0x200005fc
 80030fc:	20000600 	.word	0x20000600
 8003100:	20000614 	.word	0x20000614
 8003104:	200005f8 	.word	0x200005f8
 8003108:	200005fa 	.word	0x200005fa
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	4413      	add	r3, r2
 8003112:	331b      	adds	r3, #27
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
          break;
 8003118:	e018      	b.n	800314c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311e:	4413      	add	r3, r2
 8003120:	331b      	adds	r3, #27
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
          break;
 8003126:	e011      	b.n	800314c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312c:	4413      	add	r3, r2
 800312e:	331b      	adds	r3, #27
 8003130:	2203      	movs	r2, #3
 8003132:	701a      	strb	r2, [r3, #0]
          break;
 8003134:	e00a      	b.n	800314c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	4413      	add	r3, r2
 800313c:	331b      	adds	r3, #27
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
          break;
 8003142:	e003      	b.n	800314c <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800314a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	3301      	adds	r3, #1
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315a:	4293      	cmp	r3, r2
 800315c:	f4ff ae73 	bcc.w	8002e46 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f809 	bl	8003178 <BSP_TS_Get_GestureId>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800316c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003170:	4618      	mov	r0, r3
 8003172:	3754      	adds	r7, #84	; 0x54
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}

08003178 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <BSP_TS_Get_GestureId+0x100>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f107 0208 	add.w	r2, r7, #8
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fa22 	bl	80035de <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b49      	cmp	r3, #73	; 0x49
 800319e:	d05e      	beq.n	800325e <BSP_TS_Get_GestureId+0xe6>
 80031a0:	2b49      	cmp	r3, #73	; 0x49
 80031a2:	d860      	bhi.n	8003266 <BSP_TS_Get_GestureId+0xee>
 80031a4:	2b1c      	cmp	r3, #28
 80031a6:	d83f      	bhi.n	8003228 <BSP_TS_Get_GestureId+0xb0>
 80031a8:	2b1c      	cmp	r3, #28
 80031aa:	d85c      	bhi.n	8003266 <BSP_TS_Get_GestureId+0xee>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <BSP_TS_Get_GestureId+0x3c>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	0800322f 	.word	0x0800322f
 80031b8:	08003267 	.word	0x08003267
 80031bc:	08003267 	.word	0x08003267
 80031c0:	08003267 	.word	0x08003267
 80031c4:	08003267 	.word	0x08003267
 80031c8:	08003267 	.word	0x08003267
 80031cc:	08003267 	.word	0x08003267
 80031d0:	08003267 	.word	0x08003267
 80031d4:	08003267 	.word	0x08003267
 80031d8:	08003267 	.word	0x08003267
 80031dc:	08003267 	.word	0x08003267
 80031e0:	08003267 	.word	0x08003267
 80031e4:	08003267 	.word	0x08003267
 80031e8:	08003267 	.word	0x08003267
 80031ec:	08003267 	.word	0x08003267
 80031f0:	08003267 	.word	0x08003267
 80031f4:	08003237 	.word	0x08003237
 80031f8:	08003267 	.word	0x08003267
 80031fc:	08003267 	.word	0x08003267
 8003200:	08003267 	.word	0x08003267
 8003204:	0800323f 	.word	0x0800323f
 8003208:	08003267 	.word	0x08003267
 800320c:	08003267 	.word	0x08003267
 8003210:	08003267 	.word	0x08003267
 8003214:	08003247 	.word	0x08003247
 8003218:	08003267 	.word	0x08003267
 800321c:	08003267 	.word	0x08003267
 8003220:	08003267 	.word	0x08003267
 8003224:	0800324f 	.word	0x0800324f
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d014      	beq.n	8003256 <BSP_TS_Get_GestureId+0xde>
 800322c:	e01b      	b.n	8003266 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003234:	e01a      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800323c:	e016      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003244:	e012      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800324c:	e00e      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003254:	e00a      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2205      	movs	r2, #5
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800325c:	e006      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2206      	movs	r2, #6
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003264:	e002      	b.n	800326c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      break;
 800326a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200005fd 	.word	0x200005fd

0800327c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8003286:	20c8      	movs	r0, #200	; 0xc8
 8003288:	f7fe fed2 	bl	8002030 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800328c:	f000 fa7a 	bl	8003784 <ft5336_I2C_InitializeIfRequired>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80032c0:	2300      	movs	r3, #0
 80032c2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80032c4:	f000 fa5e 	bl	8003784 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e010      	b.n	80032f0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	21a8      	movs	r1, #168	; 0xa8
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fe8d 	bl	8001ff4 <TS_IO_Read>
 80032da:	4603      	mov	r3, r0
 80032dc:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80032de:	7b7b      	ldrb	r3, [r7, #13]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b51      	cmp	r3, #81	; 0x51
 80032e4:	d101      	bne.n	80032ea <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d802      	bhi.n	80032fc <ft5336_ReadID+0x4e>
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0e8      	beq.n	80032ce <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80032fc:	7b7b      	ldrb	r3, [r7, #13]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	b29b      	uxth	r3, r3
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa44 	bl	80037a4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f932 	bl	8003588 <ft5336_TS_DisableIT>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fe57 	bl	8001ff4 <TS_IO_Read>
 8003346:	4603      	mov	r3, r0
 8003348:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d901      	bls.n	8003362 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <ft5336_TS_DetectTouch+0x50>)
 8003368:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <ft5336_TS_DetectTouch+0x50>)
 800336c:	2200      	movs	r2, #0
 800336e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000628 	.word	0x20000628

08003380 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <ft5336_TS_GetXY+0x1d8>)
 80033a4:	789a      	ldrb	r2, [r3, #2]
 80033a6:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <ft5336_TS_GetXY+0x1d8>)
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	f080 80cf 	bcs.w	800354e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <ft5336_TS_GetXY+0x1d8>)
 80033b2:	789b      	ldrb	r3, [r3, #2]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d871      	bhi.n	800349c <ft5336_TS_GetXY+0x11c>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <ft5336_TS_GetXY+0x40>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080033fb 	.word	0x080033fb
 80033c8:	0800340d 	.word	0x0800340d
 80033cc:	0800341f 	.word	0x0800341f
 80033d0:	08003431 	.word	0x08003431
 80033d4:	08003443 	.word	0x08003443
 80033d8:	08003455 	.word	0x08003455
 80033dc:	08003467 	.word	0x08003467
 80033e0:	08003479 	.word	0x08003479
 80033e4:	0800348b 	.word	0x0800348b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80033e8:	2304      	movs	r3, #4
 80033ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80033ec:	2303      	movs	r3, #3
 80033ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80033f0:	2306      	movs	r3, #6
 80033f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80033f4:	2305      	movs	r3, #5
 80033f6:	753b      	strb	r3, [r7, #20]
      break;
 80033f8:	e051      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80033fa:	230a      	movs	r3, #10
 80033fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80033fe:	2309      	movs	r3, #9
 8003400:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003402:	230c      	movs	r3, #12
 8003404:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8003406:	230b      	movs	r3, #11
 8003408:	753b      	strb	r3, [r7, #20]
      break;
 800340a:	e048      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800340c:	2310      	movs	r3, #16
 800340e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003410:	230f      	movs	r3, #15
 8003412:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003414:	2312      	movs	r3, #18
 8003416:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003418:	2311      	movs	r3, #17
 800341a:	753b      	strb	r3, [r7, #20]
      break;
 800341c:	e03f      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800341e:	2316      	movs	r3, #22
 8003420:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003422:	2315      	movs	r3, #21
 8003424:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8003426:	2318      	movs	r3, #24
 8003428:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800342a:	2317      	movs	r3, #23
 800342c:	753b      	strb	r3, [r7, #20]
      break;
 800342e:	e036      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8003430:	231c      	movs	r3, #28
 8003432:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003434:	231b      	movs	r3, #27
 8003436:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003438:	231e      	movs	r3, #30
 800343a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800343c:	231d      	movs	r3, #29
 800343e:	753b      	strb	r3, [r7, #20]
      break;
 8003440:	e02d      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8003442:	2322      	movs	r3, #34	; 0x22
 8003444:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8003446:	2321      	movs	r3, #33	; 0x21
 8003448:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800344a:	2324      	movs	r3, #36	; 0x24
 800344c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800344e:	2323      	movs	r3, #35	; 0x23
 8003450:	753b      	strb	r3, [r7, #20]
      break;
 8003452:	e024      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8003454:	2328      	movs	r3, #40	; 0x28
 8003456:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8003458:	2327      	movs	r3, #39	; 0x27
 800345a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800345c:	232a      	movs	r3, #42	; 0x2a
 800345e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8003460:	2329      	movs	r3, #41	; 0x29
 8003462:	753b      	strb	r3, [r7, #20]
      break;
 8003464:	e01b      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8003466:	232e      	movs	r3, #46	; 0x2e
 8003468:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800346a:	232d      	movs	r3, #45	; 0x2d
 800346c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800346e:	2330      	movs	r3, #48	; 0x30
 8003470:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8003472:	232f      	movs	r3, #47	; 0x2f
 8003474:	753b      	strb	r3, [r7, #20]
      break;
 8003476:	e012      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8003478:	2334      	movs	r3, #52	; 0x34
 800347a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800347c:	2333      	movs	r3, #51	; 0x33
 800347e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8003480:	2336      	movs	r3, #54	; 0x36
 8003482:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8003484:	2335      	movs	r3, #53	; 0x35
 8003486:	753b      	strb	r3, [r7, #20]
      break;
 8003488:	e009      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800348a:	233a      	movs	r3, #58	; 0x3a
 800348c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800348e:	2339      	movs	r3, #57	; 0x39
 8003490:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003492:	233c      	movs	r3, #60	; 0x3c
 8003494:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8003496:	233b      	movs	r3, #59	; 0x3b
 8003498:	753b      	strb	r3, [r7, #20]
      break;
 800349a:	e000      	b.n	800349e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800349c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	7dfa      	ldrb	r2, [r7, #23]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fda4 	bl	8001ff4 <TS_IO_Read>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 80034b8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	7dba      	ldrb	r2, [r7, #22]
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fd96 	bl	8001ff4 <TS_IO_Read>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034d6:	b21a      	sxth	r2, r3
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b21b      	sxth	r3, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 80034e6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	7d7a      	ldrb	r2, [r7, #21]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fd7b 	bl	8001ff4 <TS_IO_Read>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	b29a      	uxth	r2, r3
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 800350a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	7d3a      	ldrb	r2, [r7, #20]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fd6d 	bl	8001ff4 <TS_IO_Read>
 800351a:	4603      	mov	r3, r0
 800351c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003528:	b21a      	sxth	r2, r3
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b21b      	sxth	r3, r3
 8003534:	b29a      	uxth	r2, r3
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 8003538:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <ft5336_TS_GetXY+0x1dc>)
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <ft5336_TS_GetXY+0x1d8>)
 8003544:	789b      	ldrb	r3, [r3, #2]
 8003546:	3301      	adds	r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4b03      	ldr	r3, [pc, #12]	; (8003558 <ft5336_TS_GetXY+0x1d8>)
 800354c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000628 	.word	0x20000628
 800355c:	2000062c 	.word	0x2000062c

08003560 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	21a4      	movs	r1, #164	; 0xa4
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fd20 	bl	8001fc0 <TS_IO_Write>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	21a4      	movs	r1, #164	; 0xa4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fd0c 	bl	8001fc0 <TS_IO_Write>
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	6039      	str	r1, [r7, #0]
 80035e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fcfd 	bl	8001ff4 <TS_IO_Read>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003630:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <ft5336_TS_GetTouchInfo+0x158>)
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4293      	cmp	r3, r2
 800363a:	f080 8090 	bcs.w	800375e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b09      	cmp	r3, #9
 8003642:	d85d      	bhi.n	8003700 <ft5336_TS_GetTouchInfo+0xf0>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <ft5336_TS_GetTouchInfo+0x3c>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003675 	.word	0x08003675
 8003650:	08003683 	.word	0x08003683
 8003654:	08003691 	.word	0x08003691
 8003658:	0800369f 	.word	0x0800369f
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036bb 	.word	0x080036bb
 8003664:	080036c9 	.word	0x080036c9
 8003668:	080036d7 	.word	0x080036d7
 800366c:	080036e5 	.word	0x080036e5
 8003670:	080036f3 	.word	0x080036f3
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8003674:	2303      	movs	r3, #3
 8003676:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8003678:	2307      	movs	r3, #7
 800367a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800367c:	2308      	movs	r3, #8
 800367e:	757b      	strb	r3, [r7, #21]
      break;
 8003680:	e03f      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8003682:	2309      	movs	r3, #9
 8003684:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8003686:	230d      	movs	r3, #13
 8003688:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800368a:	230e      	movs	r3, #14
 800368c:	757b      	strb	r3, [r7, #21]
      break;
 800368e:	e038      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003690:	230f      	movs	r3, #15
 8003692:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003694:	2313      	movs	r3, #19
 8003696:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8003698:	2314      	movs	r3, #20
 800369a:	757b      	strb	r3, [r7, #21]
      break;
 800369c:	e031      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800369e:	2315      	movs	r3, #21
 80036a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80036a2:	2319      	movs	r3, #25
 80036a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80036a6:	231a      	movs	r3, #26
 80036a8:	757b      	strb	r3, [r7, #21]
      break;
 80036aa:	e02a      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80036ac:	231b      	movs	r3, #27
 80036ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80036b0:	231f      	movs	r3, #31
 80036b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80036b4:	2320      	movs	r3, #32
 80036b6:	757b      	strb	r3, [r7, #21]
      break;
 80036b8:	e023      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80036ba:	2321      	movs	r3, #33	; 0x21
 80036bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80036be:	2325      	movs	r3, #37	; 0x25
 80036c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80036c2:	2326      	movs	r3, #38	; 0x26
 80036c4:	757b      	strb	r3, [r7, #21]
      break;
 80036c6:	e01c      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80036c8:	2327      	movs	r3, #39	; 0x27
 80036ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80036cc:	232b      	movs	r3, #43	; 0x2b
 80036ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80036d0:	232c      	movs	r3, #44	; 0x2c
 80036d2:	757b      	strb	r3, [r7, #21]
      break;
 80036d4:	e015      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80036d6:	232d      	movs	r3, #45	; 0x2d
 80036d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80036da:	2331      	movs	r3, #49	; 0x31
 80036dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80036de:	2332      	movs	r3, #50	; 0x32
 80036e0:	757b      	strb	r3, [r7, #21]
      break;
 80036e2:	e00e      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80036e4:	2333      	movs	r3, #51	; 0x33
 80036e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80036e8:	2337      	movs	r3, #55	; 0x37
 80036ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80036ec:	2338      	movs	r3, #56	; 0x38
 80036ee:	757b      	strb	r3, [r7, #21]
      break;
 80036f0:	e007      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80036f2:	2339      	movs	r3, #57	; 0x39
 80036f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80036f6:	233d      	movs	r3, #61	; 0x3d
 80036f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80036fa:	233e      	movs	r3, #62	; 0x3e
 80036fc:	757b      	strb	r3, [r7, #21]
      break;
 80036fe:	e000      	b.n	8003702 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003700:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003702:	89fb      	ldrh	r3, [r7, #14]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	7dfa      	ldrb	r2, [r7, #23]
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fc72 	bl	8001ff4 <TS_IO_Read>
 8003710:	4603      	mov	r3, r0
 8003712:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003714:	7d3b      	ldrb	r3, [r7, #20]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	119b      	asrs	r3, r3, #6
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	7dba      	ldrb	r2, [r7, #22]
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fc62 	bl	8001ff4 <TS_IO_Read>
 8003730:	4603      	mov	r3, r0
 8003732:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003734:	7d3b      	ldrb	r3, [r7, #20]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	7d7a      	ldrb	r2, [r7, #21]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fc54 	bl	8001ff4 <TS_IO_Read>
 800374c:	4603      	mov	r3, r0
 800374e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003750:	7d3b      	ldrb	r3, [r7, #20]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	111b      	asrs	r3, r3, #4
 8003756:	f003 0204 	and.w	r2, r3, #4
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000628 	.word	0x20000628

0800376c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8003772:	781b      	ldrb	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000628 	.word	0x20000628

08003784 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003788:	f7ff fff0 	bl	800376c <ft5336_Get_I2C_InitializedStatus>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003792:	f7fe fc0b 	bl	8001fac <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003796:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
  }
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000628 	.word	0x20000628

080037a4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 f94d 	bl	8003a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f000 f806 	bl	80037dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7fd ff4c 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_InitTick+0x54>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_InitTick+0x58>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f967 	bl	8003ace <HAL_SYSTICK_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e00e      	b.n	8003828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d80a      	bhi.n	8003826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003810:	2200      	movs	r2, #0
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f000 f92f 	bl	8003a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800381c:	4a06      	ldr	r2, [pc, #24]	; (8003838 <HAL_InitTick+0x5c>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000004 	.word	0x20000004
 8003834:	20000040 	.word	0x20000040
 8003838:	2000003c 	.word	0x2000003c

0800383c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_IncTick+0x20>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_IncTick+0x24>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4413      	add	r3, r2
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_IncTick+0x24>)
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000040 	.word	0x20000040
 8003860:	20000630 	.word	0x20000630

08003864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return uwTick;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_GetTick+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000630 	.word	0x20000630

0800387c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff ffee 	bl	8003864 <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d005      	beq.n	80038a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_Delay+0x44>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038a2:	bf00      	nop
 80038a4:	f7ff ffde 	bl	8003864 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d8f7      	bhi.n	80038a4 <HAL_Delay+0x28>
  {
  }
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000040 	.word	0x20000040

080038c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <__NVIC_SetPriorityGrouping+0x40>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e0:	4013      	ands	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <__NVIC_SetPriorityGrouping+0x44>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <__NVIC_SetPriorityGrouping+0x40>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	05fa0000 	.word	0x05fa0000

0800390c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <__NVIC_GetPriorityGrouping+0x18>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	f003 0307 	and.w	r3, r3, #7
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db0b      	blt.n	8003952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4907      	ldr	r1, [pc, #28]	; (8003960 <__NVIC_EnableIRQ+0x38>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f202 	lsl.w	r2, r0, r2
 800394e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db0a      	blt.n	800398e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	490c      	ldr	r1, [pc, #48]	; (80039b0 <__NVIC_SetPriority+0x4c>)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	0112      	lsls	r2, r2, #4
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	440b      	add	r3, r1
 8003988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800398c:	e00a      	b.n	80039a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4908      	ldr	r1, [pc, #32]	; (80039b4 <__NVIC_SetPriority+0x50>)
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	3b04      	subs	r3, #4
 800399c:	0112      	lsls	r2, r2, #4
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	440b      	add	r3, r1
 80039a2:	761a      	strb	r2, [r3, #24]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000e100 	.word	0xe000e100
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f1c3 0307 	rsb	r3, r3, #7
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	bf28      	it	cs
 80039d6:	2304      	movcs	r3, #4
 80039d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3304      	adds	r3, #4
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d902      	bls.n	80039e8 <NVIC_EncodePriority+0x30>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3b03      	subs	r3, #3
 80039e6:	e000      	b.n	80039ea <NVIC_EncodePriority+0x32>
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	401a      	ands	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a00:	f04f 31ff 	mov.w	r1, #4294967295
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	43d9      	mvns	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	4313      	orrs	r3, r2
         );
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a30:	d301      	bcc.n	8003a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00f      	b.n	8003a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <SysTick_Config+0x40>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a3e:	210f      	movs	r1, #15
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	f7ff ff8e 	bl	8003964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <SysTick_Config+0x40>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <SysTick_Config+0x40>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff29 	bl	80038c4 <__NVIC_SetPriorityGrouping>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8c:	f7ff ff3e 	bl	800390c <__NVIC_GetPriorityGrouping>
 8003a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff8e 	bl	80039b8 <NVIC_EncodePriority>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff5d 	bl	8003964 <__NVIC_SetPriority>
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff31 	bl	8003928 <__NVIC_EnableIRQ>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffa2 	bl	8003a20 <SysTick_Config>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af4:	f7ff feb6 	bl	8003864 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e099      	b.n	8003c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b24:	e00f      	b.n	8003b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b26:	f7ff fe9d 	bl	8003864 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d908      	bls.n	8003b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e078      	b.n	8003c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e8      	bne.n	8003b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_DMA_Init+0x158>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d117      	bne.n	8003c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8bd 	bl	8003d6c <DMA_CheckFifoParam>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c06:	2301      	movs	r3, #1
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f874 	bl	8003d00 <DMA_CalcBaseAndBitshift>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	223f      	movs	r2, #63	; 0x3f
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	f010803f 	.word	0xf010803f

08003c44 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e050      	b.n	8003cf8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	e048      	b.n	8003cf8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2221      	movs	r2, #33	; 0x21
 8003ca4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f82a 	bl	8003d00 <DMA_CalcBaseAndBitshift>
 8003cac:	4603      	mov	r3, r0
 8003cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	223f      	movs	r2, #63	; 0x3f
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3b10      	subs	r3, #16
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x60>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <DMA_CalcBaseAndBitshift+0x64>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d908      	bls.n	8003d40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <DMA_CalcBaseAndBitshift+0x68>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003d3e:	e006      	b.n	8003d4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <DMA_CalcBaseAndBitshift+0x68>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	aaaaaaab 	.word	0xaaaaaaab
 8003d64:	0800a0d0 	.word	0x0800a0d0
 8003d68:	fffffc00 	.word	0xfffffc00

08003d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11f      	bne.n	8003dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d856      	bhi.n	8003e3a <DMA_CheckFifoParam+0xce>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <DMA_CheckFifoParam+0x28>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db7 	.word	0x08003db7
 8003d9c:	08003da5 	.word	0x08003da5
 8003da0:	08003e3b 	.word	0x08003e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d046      	beq.n	8003e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e043      	b.n	8003e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dbe:	d140      	bne.n	8003e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e03d      	b.n	8003e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	d121      	bne.n	8003e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d837      	bhi.n	8003e46 <DMA_CheckFifoParam+0xda>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <DMA_CheckFifoParam+0x70>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df3 	.word	0x08003df3
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e05 	.word	0x08003e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e030      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d025      	beq.n	8003e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e02:	e022      	b.n	8003e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0c:	d11f      	bne.n	8003e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e12:	e01c      	b.n	8003e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d903      	bls.n	8003e22 <DMA_CheckFifoParam+0xb6>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d003      	beq.n	8003e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e20:	e018      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
      break;
 8003e26:	e015      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e00b      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e00a      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e008      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e006      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;
 8003e46:	bf00      	nop
 8003e48:	e004      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
      break;
 8003e52:	bf00      	nop
    }
  } 
  
  return status; 
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop

08003e64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e039      	b.n	8003eea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fc12 	bl	80016b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	f023 0107 	bic.w	r1, r3, #7
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_DMA2D_Init+0x90>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d1      	ldr	r1, [r2, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	ffffc000 	.word	0xffffc000

08003ef8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMA2D_Start+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e018      	b.n	8003f46 <HAL_DMA2D_Start+0x4e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f988 	bl	8004244 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d056      	beq.n	8004018 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6a:	f7ff fc7b 	bl	8003864 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f70:	e04b      	b.n	800400a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d023      	beq.n	8003fcc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	f043 0202 	orr.w	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2221      	movs	r2, #33	; 0x21
 8003fb6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0a5      	b.n	8004118 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d01a      	beq.n	800400a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7ff fc46 	bl	8003864 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <HAL_DMA2D_PollForTransfer+0x9c>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e086      	b.n	8004118 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ac      	beq.n	8003f72 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d061      	beq.n	80040fe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7ff fc13 	bl	8003864 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004040:	e056      	b.n	80040f0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02e      	beq.n	80040b2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	f043 0202 	orr.w	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2229      	movs	r2, #41	; 0x29
 800409c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e032      	b.n	8004118 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d01a      	beq.n	80040f0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7ff fbd3 	bl	8003864 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <HAL_DMA2D_PollForTransfer+0x182>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2203      	movs	r2, #3
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e013      	b.n	8004118 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0a1      	beq.n	8004042 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2212      	movs	r2, #18
 8004104:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_DMA2D_ConfigLayer+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e079      	b.n	8004234 <HAL_DMA2D_ConfigLayer+0x114>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3318      	adds	r3, #24
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800416a:	4b35      	ldr	r3, [pc, #212]	; (8004240 <HAL_DMA2D_ConfigLayer+0x120>)
 800416c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b0a      	cmp	r3, #10
 8004174:	d003      	beq.n	800417e <HAL_DMA2D_ConfigLayer+0x5e>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b09      	cmp	r3, #9
 800417c:	d107      	bne.n	800418e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e005      	b.n	800419a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d120      	bne.n	80041e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	ea02 0103 	and.w	r1, r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b0a      	cmp	r3, #10
 80041c8:	d003      	beq.n	80041d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	d127      	bne.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
 80041e0:	e01f      	b.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	ea02 0103 	and.w	r1, r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b0a      	cmp	r3, #10
 800420a:	d003      	beq.n	8004214 <HAL_DMA2D_ConfigLayer+0xf4>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b09      	cmp	r3, #9
 8004212:	d106      	bne.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004220:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	ff03000f 	.word	0xff03000f

08004244 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004244:	b480      	push	{r7}
 8004246:	b08b      	sub	sp, #44	; 0x2c
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	041a      	lsls	r2, r3, #16
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	431a      	orrs	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800427c:	d174      	bne.n	8004368 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004284:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800428c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004294:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d108      	bne.n	80042b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e053      	b.n	800435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d106      	bne.n	80042cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	e048      	b.n	800435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d111      	bne.n	80042f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	0cdb      	lsrs	r3, r3, #19
 80042d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	0a9b      	lsrs	r3, r3, #10
 80042de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	08db      	lsrs	r3, r3, #3
 80042e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	02db      	lsls	r3, r3, #11
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	e032      	b.n	800435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d117      	bne.n	8004330 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	0fdb      	lsrs	r3, r3, #31
 8004304:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	0cdb      	lsrs	r3, r3, #19
 800430a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	0adb      	lsrs	r3, r3, #11
 8004310:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	431a      	orrs	r2, r3
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	03db      	lsls	r3, r3, #15
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	e016      	b.n	800435e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	0f1b      	lsrs	r3, r3, #28
 8004334:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	0d1b      	lsrs	r3, r3, #20
 800433a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	0b1b      	lsrs	r3, r3, #12
 8004340:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	011a      	lsls	r2, r3, #4
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	431a      	orrs	r2, r3
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	4313      	orrs	r3, r2
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004366:	e003      	b.n	8004370 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	60da      	str	r2, [r3, #12]
}
 8004370:	bf00      	nop
 8004372:	372c      	adds	r7, #44	; 0x2c
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e175      	b.n	8004688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800439c:	2201      	movs	r2, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	f040 8164 	bne.w	8004682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d005      	beq.n	80043d2 <HAL_GPIO_Init+0x56>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d130      	bne.n	8004434 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004408:	2201      	movs	r2, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 0201 	and.w	r2, r3, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b03      	cmp	r3, #3
 800443e:	d017      	beq.n	8004470 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d123      	bne.n	80044c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	08da      	lsrs	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3208      	adds	r2, #8
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	220f      	movs	r2, #15
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0203 	and.w	r2, r3, #3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80be 	beq.w	8004682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004506:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <HAL_GPIO_Init+0x324>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a65      	ldr	r2, [pc, #404]	; (80046a0 <HAL_GPIO_Init+0x324>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_GPIO_Init+0x324>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800451e:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <HAL_GPIO_Init+0x328>)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	3302      	adds	r3, #2
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a58      	ldr	r2, [pc, #352]	; (80046a8 <HAL_GPIO_Init+0x32c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d037      	beq.n	80045ba <HAL_GPIO_Init+0x23e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a57      	ldr	r2, [pc, #348]	; (80046ac <HAL_GPIO_Init+0x330>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d031      	beq.n	80045b6 <HAL_GPIO_Init+0x23a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d02b      	beq.n	80045b2 <HAL_GPIO_Init+0x236>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a55      	ldr	r2, [pc, #340]	; (80046b4 <HAL_GPIO_Init+0x338>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d025      	beq.n	80045ae <HAL_GPIO_Init+0x232>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a54      	ldr	r2, [pc, #336]	; (80046b8 <HAL_GPIO_Init+0x33c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <HAL_GPIO_Init+0x22e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a53      	ldr	r2, [pc, #332]	; (80046bc <HAL_GPIO_Init+0x340>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d019      	beq.n	80045a6 <HAL_GPIO_Init+0x22a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_GPIO_Init+0x344>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_GPIO_Init+0x226>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <HAL_GPIO_Init+0x348>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00d      	beq.n	800459e <HAL_GPIO_Init+0x222>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <HAL_GPIO_Init+0x34c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <HAL_GPIO_Init+0x21e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a4f      	ldr	r2, [pc, #316]	; (80046cc <HAL_GPIO_Init+0x350>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <HAL_GPIO_Init+0x21a>
 8004592:	2309      	movs	r3, #9
 8004594:	e012      	b.n	80045bc <HAL_GPIO_Init+0x240>
 8004596:	230a      	movs	r3, #10
 8004598:	e010      	b.n	80045bc <HAL_GPIO_Init+0x240>
 800459a:	2308      	movs	r3, #8
 800459c:	e00e      	b.n	80045bc <HAL_GPIO_Init+0x240>
 800459e:	2307      	movs	r3, #7
 80045a0:	e00c      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045a2:	2306      	movs	r3, #6
 80045a4:	e00a      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e008      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045aa:	2304      	movs	r3, #4
 80045ac:	e006      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045ae:	2303      	movs	r3, #3
 80045b0:	e004      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045ba:	2300      	movs	r3, #0
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f002 0203 	and.w	r2, r2, #3
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	4093      	lsls	r3, r2
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045cc:	4935      	ldr	r1, [pc, #212]	; (80046a4 <HAL_GPIO_Init+0x328>)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045da:	4b3d      	ldr	r3, [pc, #244]	; (80046d0 <HAL_GPIO_Init+0x354>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fe:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800462e:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	f67f ae86 	bls.w	800439c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40013800 	.word	0x40013800
 80046a8:	40020000 	.word	0x40020000
 80046ac:	40020400 	.word	0x40020400
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40021400 	.word	0x40021400
 80046c0:	40021800 	.word	0x40021800
 80046c4:	40021c00 	.word	0x40021c00
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40022400 	.word	0x40022400
 80046d0:	40013c00 	.word	0x40013c00

080046d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e001      	b.n	80046f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
 8004710:	4613      	mov	r3, r2
 8004712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004714:	787b      	ldrb	r3, [r7, #1]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004720:	e003      	b.n	800472a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004722:	887b      	ldrh	r3, [r7, #2]
 8004724:	041a      	lsls	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	619a      	str	r2, [r3, #24]
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8a9 	bl	80048b6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d107      	bne.n	80047b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	e006      	b.n	80047c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d104      	bne.n	80047d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_I2C_Init+0x11c>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	02008000 	.word	0x02008000

08004858 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e021      	b.n	80048ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f821 	bl	80048ca <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 80f9 	bne.w	8004afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_I2C_Mem_Write+0x34>
 800490e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0ed      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2C_Mem_Write+0x4e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0e6      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004936:	f7fe ff95 	bl	8003864 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2319      	movs	r3, #25
 8004942:	2201      	movs	r2, #1
 8004944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fad1 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0d1      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2221      	movs	r2, #33	; 0x21
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004980:	88f8      	ldrh	r0, [r7, #6]
 8004982:	893a      	ldrh	r2, [r7, #8]
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	4603      	mov	r3, r0
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f9e1 	bl	8004d58 <I2C_RequestMemoryWrite>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0a9      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2bff      	cmp	r3, #255	; 0xff
 80049b0:	d90e      	bls.n	80049d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fc2d 	bl	8005228 <I2C_TransferConfig>
 80049ce:	e00f      	b.n	80049f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	8979      	ldrh	r1, [r7, #10]
 80049e2:	2300      	movs	r3, #0
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fc1c 	bl	8005228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fabb 	bl	8004f70 <I2C_WaitOnTXISFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e07b      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d034      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x1c8>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d130      	bne.n	8004aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa4d 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e04d      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2bff      	cmp	r3, #255	; 0xff
 8004a68:	d90e      	bls.n	8004a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fbd1 	bl	8005228 <I2C_TransferConfig>
 8004a86:	e00f      	b.n	8004aa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fbc0 	bl	8005228 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d19e      	bne.n	80049f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fa9a 	bl	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e01a      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2220      	movs	r2, #32
 8004acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_I2C_Mem_Write+0x224>)
 8004ada:	400b      	ands	r3, r1
 8004adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	fe00e800 	.word	0xfe00e800

08004b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	817b      	strh	r3, [r7, #10]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	813b      	strh	r3, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f040 80fd 	bne.w	8004d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x34>
 8004b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0f1      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_I2C_Mem_Read+0x4e>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e0ea      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fe fe81 	bl	8003864 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2319      	movs	r3, #25
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f9bd 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0d5      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2222      	movs	r2, #34	; 0x22
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba8:	88f8      	ldrh	r0, [r7, #6]
 8004baa:	893a      	ldrh	r2, [r7, #8]
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f921 	bl	8004e00 <I2C_RequestMemoryRead>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0ad      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2bff      	cmp	r3, #255	; 0xff
 8004bd8:	d90e      	bls.n	8004bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	8979      	ldrh	r1, [r7, #10]
 8004be8:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_I2C_Mem_Read+0x22c>)
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fb19 	bl	8005228 <I2C_TransferConfig>
 8004bf6:	e00f      	b.n	8004c18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	8979      	ldrh	r1, [r7, #10]
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_I2C_Mem_Read+0x22c>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fb08 	bl	8005228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2104      	movs	r1, #4
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f964 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07c      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d034      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0x1d0>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d130      	bne.n	8004cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f935 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e04d      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2bff      	cmp	r3, #255	; 0xff
 8004c98:	d90e      	bls.n	8004cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	8979      	ldrh	r1, [r7, #10]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fab9 	bl	8005228 <I2C_TransferConfig>
 8004cb6:	e00f      	b.n	8004cd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	8979      	ldrh	r1, [r7, #10]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 faa8 	bl	8005228 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d19a      	bne.n	8004c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f982 	bl	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e01a      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_I2C_Mem_Read+0x230>)
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
  }
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	80002400 	.word	0x80002400
 8004d38:	fe00e800 	.word	0xfe00e800

08004d3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4a:	b2db      	uxtb	r3, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	817b      	strh	r3, [r7, #10]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	813b      	strh	r3, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	8979      	ldrh	r1, [r7, #10]
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <I2C_RequestMemoryWrite+0xa4>)
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fa51 	bl	8005228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	69b9      	ldr	r1, [r7, #24]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f8f0 	bl	8004f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e02c      	b.n	8004df4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004da0:	893b      	ldrh	r3, [r7, #8]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
 8004daa:	e015      	b.n	8004dd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dac:	893b      	ldrh	r3, [r7, #8]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f8d6 	bl	8004f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e012      	b.n	8004df4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dce:	893b      	ldrh	r3, [r7, #8]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2200      	movs	r2, #0
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f884 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	80002000 	.word	0x80002000

08004e00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	817b      	strh	r3, [r7, #10]
 8004e12:	460b      	mov	r3, r1
 8004e14:	813b      	strh	r3, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <I2C_RequestMemoryRead+0xa4>)
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f9fe 	bl	8005228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f89d 	bl	8004f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e02c      	b.n	8004e9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e46:	893b      	ldrh	r3, [r7, #8]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e50:	e015      	b.n	8004e7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	69b9      	ldr	r1, [r7, #24]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f883 	bl	8004f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e012      	b.n	8004e9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2200      	movs	r2, #0
 8004e86:	2140      	movs	r1, #64	; 0x40
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f831 	bl	8004ef0 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	80002000 	.word	0x80002000

08004ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d103      	bne.n	8004ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d007      	beq.n	8004ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	619a      	str	r2, [r3, #24]
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f00:	e022      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d01e      	beq.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fe fcab 	bl	8003864 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d113      	bne.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e00f      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d0cd      	beq.n	8004f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f7c:	e02c      	b.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f870 	bl	8005068 <I2C_IsErrorOccurred>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e02a      	b.n	8004fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d01e      	beq.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9a:	f7fe fc63 	bl	8003864 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d113      	bne.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e007      	b.n	8004fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d1cb      	bne.n	8004f7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ffc:	e028      	b.n	8005050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f830 	bl	8005068 <I2C_IsErrorOccurred>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e026      	b.n	8005060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005012:	f7fe fc27 	bl	8003864 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d302      	bcc.n	8005028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d1cf      	bne.n	8004ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d068      	beq.n	8005166 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2210      	movs	r2, #16
 800509a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800509c:	e049      	b.n	8005132 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d045      	beq.n	8005132 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050a6:	f7fe fbdd 	bl	8003864 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <I2C_IsErrorOccurred+0x54>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d13a      	bne.n	8005132 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	d121      	bne.n	8005124 <I2C_IsErrorOccurred+0xbc>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e6:	d01d      	beq.n	8005124 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d01a      	beq.n	8005124 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050fe:	f7fe fbb1 	bl	8003864 <HAL_GetTick>
 8005102:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005104:	e00e      	b.n	8005124 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005106:	f7fe fbad 	bl	8003864 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b19      	cmp	r3, #25
 8005112:	d907      	bls.n	8005124 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	f043 0320 	orr.w	r3, r3, #32
 800511a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005122:	e006      	b.n	8005132 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d1e9      	bne.n	8005106 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b20      	cmp	r3, #32
 800513e:	d003      	beq.n	8005148 <I2C_IsErrorOccurred+0xe0>
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0aa      	beq.n	800509e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2220      	movs	r2, #32
 8005156:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01c      	beq.n	8005216 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fe63 	bl	8004ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <I2C_IsErrorOccurred+0x1bc>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	fe00e800 	.word	0xfe00e800

08005228 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	4613      	mov	r3, r2
 8005238:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523a:	897b      	ldrh	r3, [r7, #10]
 800523c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005240:	7a7b      	ldrb	r3, [r7, #9]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005248:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	4313      	orrs	r3, r2
 8005252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005256:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	0d5b      	lsrs	r3, r3, #21
 8005262:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <I2C_TransferConfig+0x60>)
 8005268:	430b      	orrs	r3, r1
 800526a:	43db      	mvns	r3, r3
 800526c:	ea02 0103 	and.w	r1, r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	03ff63ff 	.word	0x03ff63ff

0800528c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0bf      	b.n	800541e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc fa1e 	bl	80016f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80052ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6899      	ldr	r1, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_LTDC_Init+0x19c>)
 8005300:	400b      	ands	r3, r1
 8005302:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <HAL_LTDC_Init+0x19c>)
 800532e:	400b      	ands	r3, r1
 8005330:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68d9      	ldr	r1, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6919      	ldr	r1, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_LTDC_Init+0x19c>)
 800535c:	400b      	ands	r3, r1
 800535e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6959      	ldr	r1, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_LTDC_Init+0x19c>)
 800538a:	400b      	ands	r3, r1
 800538c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6959      	ldr	r1, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0206 	orr.w	r2, r2, #6
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	f000f800 	.word	0xf000f800

0800542c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_LTDC_ConfigLayer+0x1a>
 8005442:	2302      	movs	r3, #2
 8005444:	e02c      	b.n	80054a0 <HAL_LTDC_ConfigLayer+0x74>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2134      	movs	r1, #52	; 0x34
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4614      	mov	r4, r2
 800546a:	461d      	mov	r5, r3
 800546c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800546e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f81f 	bl	80054c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}

080054a8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80054b6:	b2db      	uxtb	r3, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	; 0x24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	4413      	add	r3, r2
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	4413      	add	r3, r2
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	4611      	mov	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	01d2      	lsls	r2, r2, #7
 8005500:	440a      	add	r2, r1
 8005502:	3284      	adds	r2, #132	; 0x84
 8005504:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005508:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800551a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800551c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	01db      	lsls	r3, r3, #7
 8005528:	440b      	add	r3, r1
 800552a:	3384      	adds	r3, #132	; 0x84
 800552c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005532:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005542:	4413      	add	r3, r2
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	01db      	lsls	r3, r3, #7
 8005552:	4413      	add	r3, r2
 8005554:	3384      	adds	r3, #132	; 0x84
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	4611      	mov	r1, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	01d2      	lsls	r2, r2, #7
 8005562:	440a      	add	r2, r1
 8005564:	3284      	adds	r2, #132	; 0x84
 8005566:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800556a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557a:	4413      	add	r3, r2
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	440b      	add	r3, r1
 800558a:	3384      	adds	r3, #132	; 0x84
 800558c:	4619      	mov	r1, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4313      	orrs	r3, r2
 8005592:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	01db      	lsls	r3, r3, #7
 800559e:	4413      	add	r3, r2
 80055a0:	3384      	adds	r3, #132	; 0x84
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	4611      	mov	r1, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	01d2      	lsls	r2, r2, #7
 80055ae:	440a      	add	r2, r1
 80055b0:	3284      	adds	r2, #132	; 0x84
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	4413      	add	r3, r2
 80055c4:	3384      	adds	r3, #132	; 0x84
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	01db      	lsls	r3, r3, #7
 80055f4:	4413      	add	r3, r2
 80055f6:	3384      	adds	r3, #132	; 0x84
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	4413      	add	r3, r2
 8005606:	3384      	adds	r3, #132	; 0x84
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005614:	461a      	mov	r2, r3
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	431a      	orrs	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	440b      	add	r3, r1
 800562a:	3384      	adds	r3, #132	; 0x84
 800562c:	4619      	mov	r1, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	01db      	lsls	r3, r3, #7
 800563e:	4413      	add	r3, r2
 8005640:	3384      	adds	r3, #132	; 0x84
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	4611      	mov	r1, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	01d2      	lsls	r2, r2, #7
 800564e:	440a      	add	r2, r1
 8005650:	3284      	adds	r2, #132	; 0x84
 8005652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005656:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	01db      	lsls	r3, r3, #7
 8005662:	4413      	add	r3, r2
 8005664:	3384      	adds	r3, #132	; 0x84
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	4413      	add	r3, r2
 800567a:	3384      	adds	r3, #132	; 0x84
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	01db      	lsls	r3, r3, #7
 8005688:	440b      	add	r3, r1
 800568a:	3384      	adds	r3, #132	; 0x84
 800568c:	4619      	mov	r1, r3
 800568e:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <LTDC_SetConfig+0x32c>)
 8005690:	4013      	ands	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	6809      	ldr	r1, [r1, #0]
 80056a0:	4608      	mov	r0, r1
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	01c9      	lsls	r1, r1, #7
 80056a6:	4401      	add	r1, r0
 80056a8:	3184      	adds	r1, #132	; 0x84
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4413      	add	r3, r2
 80056ba:	3384      	adds	r3, #132	; 0x84
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	4413      	add	r3, r2
 80056ca:	3384      	adds	r3, #132	; 0x84
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4413      	add	r3, r2
 80056de:	3384      	adds	r3, #132	; 0x84
 80056e0:	461a      	mov	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80056f0:	2304      	movs	r3, #4
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e01b      	b.n	800572e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80056fe:	2303      	movs	r3, #3
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	e014      	b.n	800572e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b04      	cmp	r3, #4
 800570a:	d00b      	beq.n	8005724 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005710:	2b02      	cmp	r3, #2
 8005712:	d007      	beq.n	8005724 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005718:	2b03      	cmp	r3, #3
 800571a:	d003      	beq.n	8005724 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005720:	2b07      	cmp	r3, #7
 8005722:	d102      	bne.n	800572a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005724:	2302      	movs	r3, #2
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e001      	b.n	800572e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	4413      	add	r3, r2
 800573a:	3384      	adds	r3, #132	; 0x84
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	4611      	mov	r1, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	01d2      	lsls	r2, r2, #7
 8005748:	440a      	add	r2, r1
 800574a:	3284      	adds	r2, #132	; 0x84
 800574c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1acb      	subs	r3, r1, r3
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	6809      	ldr	r1, [r1, #0]
 8005774:	4608      	mov	r0, r1
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	01c9      	lsls	r1, r1, #7
 800577a:	4401      	add	r1, r0
 800577c:	3184      	adds	r1, #132	; 0x84
 800577e:	4313      	orrs	r3, r2
 8005780:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	01db      	lsls	r3, r3, #7
 800578c:	4413      	add	r3, r2
 800578e:	3384      	adds	r3, #132	; 0x84
 8005790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	01db      	lsls	r3, r3, #7
 800579c:	440b      	add	r3, r1
 800579e:	3384      	adds	r3, #132	; 0x84
 80057a0:	4619      	mov	r1, r3
 80057a2:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <LTDC_SetConfig+0x330>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	01db      	lsls	r3, r3, #7
 80057b2:	4413      	add	r3, r2
 80057b4:	3384      	adds	r3, #132	; 0x84
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	01db      	lsls	r3, r3, #7
 80057c8:	4413      	add	r3, r2
 80057ca:	3384      	adds	r3, #132	; 0x84
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	4611      	mov	r1, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	01d2      	lsls	r2, r2, #7
 80057d8:	440a      	add	r2, r1
 80057da:	3284      	adds	r2, #132	; 0x84
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	6013      	str	r3, [r2, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3724      	adds	r7, #36	; 0x24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	fffff8f8 	.word	0xfffff8f8
 80057f4:	fffff800 	.word	0xfffff800

080057f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <HAL_PWREx_EnableOverDrive+0x98>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_PWREx_EnableOverDrive+0x98>)
 8005808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
 800580e:	4b20      	ldr	r3, [pc, #128]	; (8005890 <HAL_PWREx_EnableOverDrive+0x98>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005826:	f7fe f81d 	bl	8003864 <HAL_GetTick>
 800582a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800582c:	e009      	b.n	8005842 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800582e:	f7fe f819 	bl	8003864 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800583c:	d901      	bls.n	8005842 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e022      	b.n	8005888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584e:	d1ee      	bne.n	800582e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800585c:	f7fe f802 	bl	8003864 <HAL_GetTick>
 8005860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005862:	e009      	b.n	8005878 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005864:	f7fd fffe 	bl	8003864 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005872:	d901      	bls.n	8005878 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e007      	b.n	8005888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005878:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005884:	d1ee      	bne.n	8005864 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	40007000 	.word	0x40007000

08005898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e291      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8087 	beq.w	80059ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058bc:	4b96      	ldr	r3, [pc, #600]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d00c      	beq.n	80058e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c8:	4b93      	ldr	r3, [pc, #588]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d112      	bne.n	80058fa <HAL_RCC_OscConfig+0x62>
 80058d4:	4b90      	ldr	r3, [pc, #576]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e0:	d10b      	bne.n	80058fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e2:	4b8d      	ldr	r3, [pc, #564]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d06c      	beq.n	80059c8 <HAL_RCC_OscConfig+0x130>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d168      	bne.n	80059c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e26b      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005902:	d106      	bne.n	8005912 <HAL_RCC_OscConfig+0x7a>
 8005904:	4b84      	ldr	r3, [pc, #528]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a83      	ldr	r2, [pc, #524]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800590a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e02e      	b.n	8005970 <HAL_RCC_OscConfig+0xd8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0x9c>
 800591a:	4b7f      	ldr	r3, [pc, #508]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7e      	ldr	r2, [pc, #504]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b7c      	ldr	r3, [pc, #496]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7b      	ldr	r2, [pc, #492]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800592c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e01d      	b.n	8005970 <HAL_RCC_OscConfig+0xd8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593c:	d10c      	bne.n	8005958 <HAL_RCC_OscConfig+0xc0>
 800593e:	4b76      	ldr	r3, [pc, #472]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a75      	ldr	r2, [pc, #468]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4b73      	ldr	r3, [pc, #460]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a72      	ldr	r2, [pc, #456]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e00b      	b.n	8005970 <HAL_RCC_OscConfig+0xd8>
 8005958:	4b6f      	ldr	r3, [pc, #444]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a6e      	ldr	r2, [pc, #440]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800595e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	4b6c      	ldr	r3, [pc, #432]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6b      	ldr	r2, [pc, #428]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 800596a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d013      	beq.n	80059a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fd ff74 	bl	8003864 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005980:	f7fd ff70 	bl	8003864 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e21f      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0xe8>
 800599e:	e014      	b.n	80059ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fd ff60 	bl	8003864 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fd ff5c 	bl	8003864 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	; 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e20b      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	4b57      	ldr	r3, [pc, #348]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x110>
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d069      	beq.n	8005aaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d6:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e2:	4b4d      	ldr	r3, [pc, #308]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d11c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x190>
 80059ee:	4b4a      	ldr	r3, [pc, #296]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCC_OscConfig+0x17a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e1df      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a12:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	493d      	ldr	r1, [pc, #244]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	e040      	b.n	8005aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d023      	beq.n	8005a78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fd ff12 	bl	8003864 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a44:	f7fd ff0e 	bl	8003864 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1bd      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a56:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4929      	ldr	r1, [pc, #164]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
 8005a76:	e018      	b.n	8005aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a78:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd feee 	bl	8003864 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8c:	f7fd feea 	bl	8003864 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e199      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d038      	beq.n	8005b28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d019      	beq.n	8005af2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005abe:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fd fecb 	bl	8003864 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad2:	f7fd fec7 	bl	8003864 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e176      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x23a>
 8005af0:	e01a      	b.n	8005b28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fd feb1 	bl	8003864 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b06:	f7fd fead 	bl	8003864 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d903      	bls.n	8005b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e15c      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
 8005b18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b1c:	4b91      	ldr	r3, [pc, #580]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ee      	bne.n	8005b06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80a4 	beq.w	8005c7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b36:	4b8b      	ldr	r3, [pc, #556]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10d      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b42:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a87      	ldr	r2, [pc, #540]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b85      	ldr	r3, [pc, #532]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b5e:	4b82      	ldr	r3, [pc, #520]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d118      	bne.n	8005b9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b6a:	4b7f      	ldr	r3, [pc, #508]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7e      	ldr	r2, [pc, #504]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b76:	f7fd fe75 	bl	8003864 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7e:	f7fd fe71 	bl	8003864 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b64      	cmp	r3, #100	; 0x64
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e120      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b90:	4b75      	ldr	r3, [pc, #468]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x31a>
 8005ba4:	4b6f      	ldr	r3, [pc, #444]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a6e      	ldr	r2, [pc, #440]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	e02d      	b.n	8005c0e <HAL_RCC_OscConfig+0x376>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x33c>
 8005bba:	4b6a      	ldr	r3, [pc, #424]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a69      	ldr	r2, [pc, #420]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc6:	4b67      	ldr	r3, [pc, #412]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a66      	ldr	r2, [pc, #408]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	e01c      	b.n	8005c0e <HAL_RCC_OscConfig+0x376>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b05      	cmp	r3, #5
 8005bda:	d10c      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x35e>
 8005bdc:	4b61      	ldr	r3, [pc, #388]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be0:	4a60      	ldr	r2, [pc, #384]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005be2:	f043 0304 	orr.w	r3, r3, #4
 8005be6:	6713      	str	r3, [r2, #112]	; 0x70
 8005be8:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bec:	4a5d      	ldr	r2, [pc, #372]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf4:	e00b      	b.n	8005c0e <HAL_RCC_OscConfig+0x376>
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	4a5a      	ldr	r2, [pc, #360]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	6713      	str	r3, [r2, #112]	; 0x70
 8005c02:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	4a57      	ldr	r2, [pc, #348]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d015      	beq.n	8005c42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c16:	f7fd fe25 	bl	8003864 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1e:	f7fd fe21 	bl	8003864 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e0ce      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ee      	beq.n	8005c1e <HAL_RCC_OscConfig+0x386>
 8005c40:	e014      	b.n	8005c6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fd fe0f 	bl	8003864 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4a:	f7fd fe0b 	bl	8003864 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0b8      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c60:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1ee      	bne.n	8005c4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c72:	4b3c      	ldr	r3, [pc, #240]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80a4 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c88:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d06b      	beq.n	8005d6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d149      	bne.n	8005d30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9c:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a30      	ldr	r2, [pc, #192]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fddc 	bl	8003864 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fd fdd8 	bl	8003864 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e087      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	019b      	lsls	r3, r3, #6
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fd fdac 	bl	8003864 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fd fda8 	bl	8003864 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e057      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0x478>
 8005d2e:	e04f      	b.n	8005dd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fd fd92 	bl	8003864 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fd8e 	bl	8003864 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e03d      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x4ac>
 8005d62:	e035      	b.n	8005dd0 <HAL_RCC_OscConfig+0x538>
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <HAL_RCC_OscConfig+0x544>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d028      	beq.n	8005dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d121      	bne.n	8005dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d11a      	bne.n	8005dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d111      	bne.n	8005dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	3b01      	subs	r3, #1
 8005db6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d107      	bne.n	8005dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800

08005de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0d0      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df8:	4b6a      	ldr	r3, [pc, #424]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d910      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b67      	ldr	r3, [pc, #412]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 020f 	bic.w	r2, r3, #15
 8005e0e:	4965      	ldr	r1, [pc, #404]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0b8      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e40:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a52      	ldr	r2, [pc, #328]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e64:	4b50      	ldr	r3, [pc, #320]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	494d      	ldr	r1, [pc, #308]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d040      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d115      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea2:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e073      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06b      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec2:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 0203 	bic.w	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4936      	ldr	r1, [pc, #216]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed4:	f7fd fcc6 	bl	8003864 <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005edc:	f7fd fcc2 	bl	8003864 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e053      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 020c 	and.w	r2, r3, #12
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d1eb      	bne.n	8005edc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f04:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d210      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 020f 	bic.w	r2, r3, #15
 8005f1a:	4922      	ldr	r1, [pc, #136]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e032      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4916      	ldr	r1, [pc, #88]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f72:	f000 f821 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	490a      	ldr	r1, [pc, #40]	; (8005fac <HAL_RCC_ClockConfig+0x1cc>)
 8005f84:	5ccb      	ldrb	r3, [r1, r3]
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8005f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_ClockConfig+0x1d4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fd fc22 	bl	80037dc <HAL_InitTick>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023c00 	.word	0x40023c00
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	08008600 	.word	0x08008600
 8005fb0:	20000004 	.word	0x20000004
 8005fb4:	2000003c 	.word	0x2000003c

08005fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fbc:	b090      	sub	sp, #64	; 0x40
 8005fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc8:	2300      	movs	r3, #0
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd0:	4b59      	ldr	r3, [pc, #356]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d00d      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	f200 80a1 	bhi.w	8006124 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x34>
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fea:	e09b      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCC_GetSysClockFreq+0x184>)
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ff0:	e09b      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ff6:	e098      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ff8:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006002:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d028      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600e:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	2200      	movs	r2, #0
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	627a      	str	r2, [r7, #36]	; 0x24
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006020:	2100      	movs	r1, #0
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8006024:	fb03 f201 	mul.w	r2, r3, r1
 8006028:	2300      	movs	r3, #0
 800602a:	fb00 f303 	mul.w	r3, r0, r3
 800602e:	4413      	add	r3, r2
 8006030:	4a43      	ldr	r2, [pc, #268]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8006032:	fba0 1202 	umull	r1, r2, r0, r2
 8006036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006038:	460a      	mov	r2, r1
 800603a:	62ba      	str	r2, [r7, #40]	; 0x28
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	4413      	add	r3, r2
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	2200      	movs	r2, #0
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006052:	f7fa f92d 	bl	80002b0 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4613      	mov	r3, r2
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605e:	e053      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006060:	4b35      	ldr	r3, [pc, #212]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	2200      	movs	r2, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	617a      	str	r2, [r7, #20]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006072:	f04f 0b00 	mov.w	fp, #0
 8006076:	4652      	mov	r2, sl
 8006078:	465b      	mov	r3, fp
 800607a:	f04f 0000 	mov.w	r0, #0
 800607e:	f04f 0100 	mov.w	r1, #0
 8006082:	0159      	lsls	r1, r3, #5
 8006084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006088:	0150      	lsls	r0, r2, #5
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	ebb2 080a 	subs.w	r8, r2, sl
 8006092:	eb63 090b 	sbc.w	r9, r3, fp
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060aa:	ebb2 0408 	subs.w	r4, r2, r8
 80060ae:	eb63 0509 	sbc.w	r5, r3, r9
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	00eb      	lsls	r3, r5, #3
 80060bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c0:	00e2      	lsls	r2, r4, #3
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	eb14 030a 	adds.w	r3, r4, sl
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	eb45 030b 	adc.w	r3, r5, fp
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060de:	4629      	mov	r1, r5
 80060e0:	028b      	lsls	r3, r1, #10
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e8:	4621      	mov	r1, r4
 80060ea:	028a      	lsls	r2, r1, #10
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2200      	movs	r2, #0
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fc:	f7fa f8d8 	bl	80002b0 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	3301      	adds	r3, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006122:	e002      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetSysClockFreq+0x184>)
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800612c:	4618      	mov	r0, r3
 800612e:	3740      	adds	r7, #64	; 0x40
 8006130:	46bd      	mov	sp, r7
 8006132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800
 800613c:	00f42400 	.word	0x00f42400
 8006140:	017d7840 	.word	0x017d7840

08006144 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006148:	4b03      	ldr	r3, [pc, #12]	; (8006158 <HAL_RCC_GetHCLKFreq+0x14>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000004 	.word	0x20000004

0800615c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006160:	f7ff fff0 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0a9b      	lsrs	r3, r3, #10
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4903      	ldr	r1, [pc, #12]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40023800 	.word	0x40023800
 8006180:	08008610 	.word	0x08008610

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006188:	f7ff ffdc 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	0b5b      	lsrs	r3, r3, #13
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4903      	ldr	r1, [pc, #12]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40023800 	.word	0x40023800
 80061a8:	08008610 	.word	0x08008610

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061d4:	4b69      	ldr	r3, [pc, #420]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a68      	ldr	r2, [pc, #416]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061de:	6093      	str	r3, [r2, #8]
 80061e0:	4b66      	ldr	r3, [pc, #408]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	4964      	ldr	r1, [pc, #400]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d017      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006206:	4b5d      	ldr	r3, [pc, #372]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	4959      	ldr	r1, [pc, #356]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	d101      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006226:	2301      	movs	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006232:	2301      	movs	r3, #1
 8006234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d017      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006242:	4b4e      	ldr	r3, [pc, #312]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	494a      	ldr	r1, [pc, #296]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006260:	d101      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006262:	2301      	movs	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800626e:	2301      	movs	r3, #1
 8006270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800627e:	2301      	movs	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 808b 	beq.w	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006290:	4b3a      	ldr	r3, [pc, #232]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	4a39      	ldr	r2, [pc, #228]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629a:	6413      	str	r3, [r2, #64]	; 0x40
 800629c:	4b37      	ldr	r3, [pc, #220]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062a8:	4b35      	ldr	r3, [pc, #212]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a34      	ldr	r2, [pc, #208]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b4:	f7fd fad6 	bl	8003864 <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062bc:	f7fd fad2 	bl	8003864 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	; 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e357      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062ce:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062da:	4b28      	ldr	r3, [pc, #160]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d035      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d02e      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	4a1d      	ldr	r2, [pc, #116]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006318:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d114      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fd fa9a 	bl	8003864 <HAL_GetTick>
 8006330:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006332:	e00a      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fd fa96 	bl	8003864 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e319      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0ee      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006362:	d111      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006372:	400b      	ands	r3, r1
 8006374:	4901      	ldr	r1, [pc, #4]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
 800637a:	e00b      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800637c:	40023800 	.word	0x40023800
 8006380:	40007000 	.word	0x40007000
 8006384:	0ffffcff 	.word	0x0ffffcff
 8006388:	4baa      	ldr	r3, [pc, #680]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4aa9      	ldr	r2, [pc, #676]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006392:	6093      	str	r3, [r2, #8]
 8006394:	4ba7      	ldr	r3, [pc, #668]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a0:	49a4      	ldr	r1, [pc, #656]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d010      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063b2:	4ba0      	ldr	r3, [pc, #640]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b8:	4a9e      	ldr	r2, [pc, #632]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063c2:	4b9c      	ldr	r3, [pc, #624]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	4999      	ldr	r1, [pc, #612]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ee:	4991      	ldr	r1, [pc, #580]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006402:	4b8c      	ldr	r3, [pc, #560]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	4988      	ldr	r1, [pc, #544]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006424:	4b83      	ldr	r3, [pc, #524]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006432:	4980      	ldr	r1, [pc, #512]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006446:	4b7b      	ldr	r3, [pc, #492]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006454:	4977      	ldr	r1, [pc, #476]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006468:	4b72      	ldr	r3, [pc, #456]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	496f      	ldr	r1, [pc, #444]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800648a:	4b6a      	ldr	r3, [pc, #424]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f023 020c 	bic.w	r2, r3, #12
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006498:	4966      	ldr	r1, [pc, #408]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ac:	4b61      	ldr	r3, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ba:	495e      	ldr	r1, [pc, #376]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064ce:	4b59      	ldr	r3, [pc, #356]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064dc:	4955      	ldr	r1, [pc, #340]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064f0:	4b50      	ldr	r3, [pc, #320]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	494d      	ldr	r1, [pc, #308]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006512:	4b48      	ldr	r3, [pc, #288]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	4944      	ldr	r1, [pc, #272]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006534:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	493c      	ldr	r1, [pc, #240]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006556:	4b37      	ldr	r3, [pc, #220]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006564:	4933      	ldr	r1, [pc, #204]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006578:	4b2e      	ldr	r3, [pc, #184]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006586:	492b      	ldr	r1, [pc, #172]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800659a:	4b26      	ldr	r3, [pc, #152]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a8:	4922      	ldr	r1, [pc, #136]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065b8:	d101      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065ba:	2301      	movs	r3, #1
 80065bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80065ca:	2301      	movs	r3, #1
 80065cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	4912      	ldr	r1, [pc, #72]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660c:	4909      	ldr	r1, [pc, #36]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d006      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80d9 	beq.w	80067da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a01      	ldr	r2, [pc, #4]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800662e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006632:	e001      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006634:	40023800 	.word	0x40023800
 8006638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663a:	f7fd f913 	bl	8003864 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006640:	e008      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006642:	f7fd f90f 	bl	8003864 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b64      	cmp	r3, #100	; 0x64
 800664e:	d901      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e194      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006654:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f0      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d021      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11d      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006674:	4b64      	ldr	r3, [pc, #400]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006682:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006688:	0e1b      	lsrs	r3, r3, #24
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	019a      	lsls	r2, r3, #6
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	071b      	lsls	r3, r3, #28
 80066a8:	4957      	ldr	r1, [pc, #348]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02e      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066da:	d129      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066dc:	4b4a      	ldr	r3, [pc, #296]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f0:	0f1b      	lsrs	r3, r3, #28
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	019a      	lsls	r2, r3, #6
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	431a      	orrs	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	071b      	lsls	r3, r3, #28
 8006710:	493d      	ldr	r1, [pc, #244]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006718:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800671a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671e:	f023 021f 	bic.w	r2, r3, #31
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	3b01      	subs	r3, #1
 8006728:	4937      	ldr	r1, [pc, #220]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01d      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800673c:	4b32      	ldr	r3, [pc, #200]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006742:	0e1b      	lsrs	r3, r3, #24
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800674a:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006750:	0f1b      	lsrs	r3, r3, #28
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	019a      	lsls	r2, r3, #6
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	431a      	orrs	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	431a      	orrs	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	071b      	lsls	r3, r3, #28
 8006770:	4925      	ldr	r1, [pc, #148]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	019a      	lsls	r2, r3, #6
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	071b      	lsls	r3, r3, #28
 80067a0:	4919      	ldr	r1, [pc, #100]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067a8:	4b17      	ldr	r3, [pc, #92]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b4:	f7fd f856 	bl	8003864 <HAL_GetTick>
 80067b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067bc:	f7fd f852 	bl	8003864 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b64      	cmp	r3, #100	; 0x64
 80067c8:	d901      	bls.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e0d7      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 80cd 	bne.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ee:	f7fd f839 	bl	8003864 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067f6:	f7fd f835 	bl	8003864 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d903      	bls.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e0ba      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006808:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800680c:	4b5e      	ldr	r3, [pc, #376]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006818:	d0ed      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006836:	2b00      	cmp	r3, #0
 8006838:	d02e      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d12a      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006842:	4b51      	ldr	r3, [pc, #324]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006850:	4b4d      	ldr	r3, [pc, #308]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	0f1b      	lsrs	r3, r3, #28
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	019a      	lsls	r2, r3, #6
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	061b      	lsls	r3, r3, #24
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	4944      	ldr	r1, [pc, #272]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800687e:	4b42      	ldr	r3, [pc, #264]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	3b01      	subs	r3, #1
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	493d      	ldr	r1, [pc, #244]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ac:	d11d      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ae:	4b36      	ldr	r3, [pc, #216]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068bc:	4b32      	ldr	r3, [pc, #200]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	0f1b      	lsrs	r3, r3, #28
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	019a      	lsls	r2, r3, #6
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	431a      	orrs	r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	061b      	lsls	r3, r3, #24
 80068dc:	431a      	orrs	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	071b      	lsls	r3, r3, #28
 80068e2:	4929      	ldr	r1, [pc, #164]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d028      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	0e1b      	lsrs	r3, r3, #24
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006904:	4b20      	ldr	r3, [pc, #128]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	019a      	lsls	r2, r3, #6
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	431a      	orrs	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	061b      	lsls	r3, r3, #24
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	4917      	ldr	r1, [pc, #92]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4911      	ldr	r1, [pc, #68]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a0e      	ldr	r2, [pc, #56]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006954:	f7fc ff86 	bl	8003864 <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800695c:	f7fc ff82 	bl	8003864 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e007      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697a:	d1ef      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40023800 	.word	0x40023800

0800698c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e025      	b.n	80069ec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fb f8e9 	bl	8001b8c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f001 f823 	bl	8007a18 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	461a      	mov	r2, r3
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	f001 f877 	bl	8007ad0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a06:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d101      	bne.n	8006a12 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e021      	b.n	8006a56 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <HAL_SDRAM_SendCommand+0x2a>
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b05      	cmp	r3, #5
 8006a1c:	d118      	bne.n	8006a50 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f8b8 	bl	8007ba4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d104      	bne.n	8006a46 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a44:	e006      	b.n	8006a54 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a4e:	e001      	b.n	8006a54 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d101      	bne.n	8006a78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
 8006a76:	e016      	b.n	8006aa6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d10f      	bne.n	8006aa4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f8aa 	bl	8007bec <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e049      	b.n	8006b54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fa ff05 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f000 f9f5 	bl	8006edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d001      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e054      	b.n	8006c1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d022      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9e:	d01d      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a22      	ldr	r2, [pc, #136]	; (8006c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1f      	ldr	r2, [pc, #124]	; (8006c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <HAL_TIM_Base_Start_IT+0xe0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <HAL_TIM_Base_Start_IT+0xe4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <HAL_TIM_Base_Start_IT+0xe8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d115      	bne.n	8006c08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_TIM_Base_Start_IT+0xec>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d015      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d011      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	e008      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e000      	b.n	8006c1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40001800 	.word	0x40001800
 8006c48:	00010007 	.word	0x00010007

08006c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0202 	mvn.w	r2, #2
 8006c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f905 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8f7 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f908 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d122      	bne.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d11b      	bne.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0204 	mvn.w	r2, #4
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8db 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8cd 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8de 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0208 	mvn.w	r2, #8
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2204      	movs	r2, #4
 8006d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8b1 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8a3 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8b4 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0210 	mvn.w	r2, #16
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f887 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f879 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f88a 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0201 	mvn.w	r2, #1
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fa fb5a 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de8:	2b80      	cmp	r3, #128	; 0x80
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9a8 	bl	800714c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0a:	d10e      	bne.n	8006e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e16:	2b80      	cmp	r3, #128	; 0x80
 8006e18:	d107      	bne.n	8006e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f99b 	bl	8007160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d10e      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f838 	bl	8006ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d10e      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d107      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f06f 0220 	mvn.w	r2, #32
 8006e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f95b 	bl	8007138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a40      	ldr	r2, [pc, #256]	; (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efa:	d00f      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3d      	ldr	r2, [pc, #244]	; (8006ff4 <TIM_Base_SetConfig+0x118>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a3c      	ldr	r2, [pc, #240]	; (8006ff8 <TIM_Base_SetConfig+0x11c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3b      	ldr	r2, [pc, #236]	; (8006ffc <TIM_Base_SetConfig+0x120>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3a      	ldr	r2, [pc, #232]	; (8007000 <TIM_Base_SetConfig+0x124>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d108      	bne.n	8006f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a2f      	ldr	r2, [pc, #188]	; (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d02b      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d027      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2c      	ldr	r2, [pc, #176]	; (8006ff4 <TIM_Base_SetConfig+0x118>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d023      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <TIM_Base_SetConfig+0x11c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01f      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <TIM_Base_SetConfig+0x120>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01b      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a29      	ldr	r2, [pc, #164]	; (8007000 <TIM_Base_SetConfig+0x124>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d017      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a28      	ldr	r2, [pc, #160]	; (8007004 <TIM_Base_SetConfig+0x128>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a27      	ldr	r2, [pc, #156]	; (8007008 <TIM_Base_SetConfig+0x12c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00f      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a26      	ldr	r2, [pc, #152]	; (800700c <TIM_Base_SetConfig+0x130>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00b      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a25      	ldr	r2, [pc, #148]	; (8007010 <TIM_Base_SetConfig+0x134>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a24      	ldr	r2, [pc, #144]	; (8007014 <TIM_Base_SetConfig+0x138>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a23      	ldr	r2, [pc, #140]	; (8007018 <TIM_Base_SetConfig+0x13c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d108      	bne.n	8006fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a0a      	ldr	r2, [pc, #40]	; (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0xf8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a0c      	ldr	r2, [pc, #48]	; (8007000 <TIM_Base_SetConfig+0x124>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d103      	bne.n	8006fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40010400 	.word	0x40010400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800
 8007010:	40001800 	.word	0x40001800
 8007014:	40001c00 	.word	0x40001c00
 8007018:	40002000 	.word	0x40002000

0800701c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007030:	2302      	movs	r3, #2
 8007032:	e06d      	b.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a30      	ldr	r2, [pc, #192]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d108      	bne.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800706e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a6:	d01d      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10c      	bne.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010000 	.word	0x40010000
 8007120:	40010400 	.word	0x40010400
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40014000 	.word	0x40014000
 8007134:	40001800 	.word	0x40001800

08007138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e040      	b.n	8007208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa fbe6 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2224      	movs	r2, #36	; 0x24
 80071a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0201 	bic.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f82c 	bl	8007210 <UART_SetConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e022      	b.n	8007208 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa84 	bl	80076d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fb0b 	bl	800781c <UART_CheckIdleState>
 8007206:	4603      	mov	r3, r0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4ba6      	ldr	r3, [pc, #664]	; (80074d4 <UART_SetConfig+0x2c4>)
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	6979      	ldr	r1, [r7, #20]
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a94      	ldr	r2, [pc, #592]	; (80074d8 <UART_SetConfig+0x2c8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d120      	bne.n	80072ce <UART_SetConfig+0xbe>
 800728c:	4b93      	ldr	r3, [pc, #588]	; (80074dc <UART_SetConfig+0x2cc>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d816      	bhi.n	80072c8 <UART_SetConfig+0xb8>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x90>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072bd 	.word	0x080072bd
 80072a8:	080072b7 	.word	0x080072b7
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	2301      	movs	r3, #1
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e150      	b.n	8007558 <UART_SetConfig+0x348>
 80072b6:	2302      	movs	r3, #2
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e14d      	b.n	8007558 <UART_SetConfig+0x348>
 80072bc:	2304      	movs	r3, #4
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e14a      	b.n	8007558 <UART_SetConfig+0x348>
 80072c2:	2308      	movs	r3, #8
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e147      	b.n	8007558 <UART_SetConfig+0x348>
 80072c8:	2310      	movs	r3, #16
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e144      	b.n	8007558 <UART_SetConfig+0x348>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a83      	ldr	r2, [pc, #524]	; (80074e0 <UART_SetConfig+0x2d0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d132      	bne.n	800733e <UART_SetConfig+0x12e>
 80072d8:	4b80      	ldr	r3, [pc, #512]	; (80074dc <UART_SetConfig+0x2cc>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 030c 	and.w	r3, r3, #12
 80072e2:	2b0c      	cmp	r3, #12
 80072e4:	d828      	bhi.n	8007338 <UART_SetConfig+0x128>
 80072e6:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <UART_SetConfig+0xdc>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007339 	.word	0x08007339
 80072f4:	08007339 	.word	0x08007339
 80072f8:	08007339 	.word	0x08007339
 80072fc:	0800732d 	.word	0x0800732d
 8007300:	08007339 	.word	0x08007339
 8007304:	08007339 	.word	0x08007339
 8007308:	08007339 	.word	0x08007339
 800730c:	08007327 	.word	0x08007327
 8007310:	08007339 	.word	0x08007339
 8007314:	08007339 	.word	0x08007339
 8007318:	08007339 	.word	0x08007339
 800731c:	08007333 	.word	0x08007333
 8007320:	2300      	movs	r3, #0
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e118      	b.n	8007558 <UART_SetConfig+0x348>
 8007326:	2302      	movs	r3, #2
 8007328:	77fb      	strb	r3, [r7, #31]
 800732a:	e115      	b.n	8007558 <UART_SetConfig+0x348>
 800732c:	2304      	movs	r3, #4
 800732e:	77fb      	strb	r3, [r7, #31]
 8007330:	e112      	b.n	8007558 <UART_SetConfig+0x348>
 8007332:	2308      	movs	r3, #8
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e10f      	b.n	8007558 <UART_SetConfig+0x348>
 8007338:	2310      	movs	r3, #16
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e10c      	b.n	8007558 <UART_SetConfig+0x348>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a68      	ldr	r2, [pc, #416]	; (80074e4 <UART_SetConfig+0x2d4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d120      	bne.n	800738a <UART_SetConfig+0x17a>
 8007348:	4b64      	ldr	r3, [pc, #400]	; (80074dc <UART_SetConfig+0x2cc>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007352:	2b30      	cmp	r3, #48	; 0x30
 8007354:	d013      	beq.n	800737e <UART_SetConfig+0x16e>
 8007356:	2b30      	cmp	r3, #48	; 0x30
 8007358:	d814      	bhi.n	8007384 <UART_SetConfig+0x174>
 800735a:	2b20      	cmp	r3, #32
 800735c:	d009      	beq.n	8007372 <UART_SetConfig+0x162>
 800735e:	2b20      	cmp	r3, #32
 8007360:	d810      	bhi.n	8007384 <UART_SetConfig+0x174>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <UART_SetConfig+0x15c>
 8007366:	2b10      	cmp	r3, #16
 8007368:	d006      	beq.n	8007378 <UART_SetConfig+0x168>
 800736a:	e00b      	b.n	8007384 <UART_SetConfig+0x174>
 800736c:	2300      	movs	r3, #0
 800736e:	77fb      	strb	r3, [r7, #31]
 8007370:	e0f2      	b.n	8007558 <UART_SetConfig+0x348>
 8007372:	2302      	movs	r3, #2
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e0ef      	b.n	8007558 <UART_SetConfig+0x348>
 8007378:	2304      	movs	r3, #4
 800737a:	77fb      	strb	r3, [r7, #31]
 800737c:	e0ec      	b.n	8007558 <UART_SetConfig+0x348>
 800737e:	2308      	movs	r3, #8
 8007380:	77fb      	strb	r3, [r7, #31]
 8007382:	e0e9      	b.n	8007558 <UART_SetConfig+0x348>
 8007384:	2310      	movs	r3, #16
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e0e6      	b.n	8007558 <UART_SetConfig+0x348>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a56      	ldr	r2, [pc, #344]	; (80074e8 <UART_SetConfig+0x2d8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d120      	bne.n	80073d6 <UART_SetConfig+0x1c6>
 8007394:	4b51      	ldr	r3, [pc, #324]	; (80074dc <UART_SetConfig+0x2cc>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800739e:	2bc0      	cmp	r3, #192	; 0xc0
 80073a0:	d013      	beq.n	80073ca <UART_SetConfig+0x1ba>
 80073a2:	2bc0      	cmp	r3, #192	; 0xc0
 80073a4:	d814      	bhi.n	80073d0 <UART_SetConfig+0x1c0>
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d009      	beq.n	80073be <UART_SetConfig+0x1ae>
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d810      	bhi.n	80073d0 <UART_SetConfig+0x1c0>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <UART_SetConfig+0x1a8>
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d006      	beq.n	80073c4 <UART_SetConfig+0x1b4>
 80073b6:	e00b      	b.n	80073d0 <UART_SetConfig+0x1c0>
 80073b8:	2300      	movs	r3, #0
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e0cc      	b.n	8007558 <UART_SetConfig+0x348>
 80073be:	2302      	movs	r3, #2
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e0c9      	b.n	8007558 <UART_SetConfig+0x348>
 80073c4:	2304      	movs	r3, #4
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e0c6      	b.n	8007558 <UART_SetConfig+0x348>
 80073ca:	2308      	movs	r3, #8
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e0c3      	b.n	8007558 <UART_SetConfig+0x348>
 80073d0:	2310      	movs	r3, #16
 80073d2:	77fb      	strb	r3, [r7, #31]
 80073d4:	e0c0      	b.n	8007558 <UART_SetConfig+0x348>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a44      	ldr	r2, [pc, #272]	; (80074ec <UART_SetConfig+0x2dc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d125      	bne.n	800742c <UART_SetConfig+0x21c>
 80073e0:	4b3e      	ldr	r3, [pc, #248]	; (80074dc <UART_SetConfig+0x2cc>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ee:	d017      	beq.n	8007420 <UART_SetConfig+0x210>
 80073f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f4:	d817      	bhi.n	8007426 <UART_SetConfig+0x216>
 80073f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fa:	d00b      	beq.n	8007414 <UART_SetConfig+0x204>
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007400:	d811      	bhi.n	8007426 <UART_SetConfig+0x216>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <UART_SetConfig+0x1fe>
 8007406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740a:	d006      	beq.n	800741a <UART_SetConfig+0x20a>
 800740c:	e00b      	b.n	8007426 <UART_SetConfig+0x216>
 800740e:	2300      	movs	r3, #0
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e0a1      	b.n	8007558 <UART_SetConfig+0x348>
 8007414:	2302      	movs	r3, #2
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e09e      	b.n	8007558 <UART_SetConfig+0x348>
 800741a:	2304      	movs	r3, #4
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e09b      	b.n	8007558 <UART_SetConfig+0x348>
 8007420:	2308      	movs	r3, #8
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e098      	b.n	8007558 <UART_SetConfig+0x348>
 8007426:	2310      	movs	r3, #16
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e095      	b.n	8007558 <UART_SetConfig+0x348>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2f      	ldr	r2, [pc, #188]	; (80074f0 <UART_SetConfig+0x2e0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d125      	bne.n	8007482 <UART_SetConfig+0x272>
 8007436:	4b29      	ldr	r3, [pc, #164]	; (80074dc <UART_SetConfig+0x2cc>)
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007444:	d017      	beq.n	8007476 <UART_SetConfig+0x266>
 8007446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800744a:	d817      	bhi.n	800747c <UART_SetConfig+0x26c>
 800744c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007450:	d00b      	beq.n	800746a <UART_SetConfig+0x25a>
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007456:	d811      	bhi.n	800747c <UART_SetConfig+0x26c>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <UART_SetConfig+0x254>
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d006      	beq.n	8007470 <UART_SetConfig+0x260>
 8007462:	e00b      	b.n	800747c <UART_SetConfig+0x26c>
 8007464:	2301      	movs	r3, #1
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e076      	b.n	8007558 <UART_SetConfig+0x348>
 800746a:	2302      	movs	r3, #2
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e073      	b.n	8007558 <UART_SetConfig+0x348>
 8007470:	2304      	movs	r3, #4
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e070      	b.n	8007558 <UART_SetConfig+0x348>
 8007476:	2308      	movs	r3, #8
 8007478:	77fb      	strb	r3, [r7, #31]
 800747a:	e06d      	b.n	8007558 <UART_SetConfig+0x348>
 800747c:	2310      	movs	r3, #16
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e06a      	b.n	8007558 <UART_SetConfig+0x348>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <UART_SetConfig+0x2e4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d138      	bne.n	80074fe <UART_SetConfig+0x2ee>
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <UART_SetConfig+0x2cc>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800749a:	d017      	beq.n	80074cc <UART_SetConfig+0x2bc>
 800749c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074a0:	d82a      	bhi.n	80074f8 <UART_SetConfig+0x2e8>
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	d00b      	beq.n	80074c0 <UART_SetConfig+0x2b0>
 80074a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ac:	d824      	bhi.n	80074f8 <UART_SetConfig+0x2e8>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <UART_SetConfig+0x2aa>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	d006      	beq.n	80074c6 <UART_SetConfig+0x2b6>
 80074b8:	e01e      	b.n	80074f8 <UART_SetConfig+0x2e8>
 80074ba:	2300      	movs	r3, #0
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e04b      	b.n	8007558 <UART_SetConfig+0x348>
 80074c0:	2302      	movs	r3, #2
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e048      	b.n	8007558 <UART_SetConfig+0x348>
 80074c6:	2304      	movs	r3, #4
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e045      	b.n	8007558 <UART_SetConfig+0x348>
 80074cc:	2308      	movs	r3, #8
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e042      	b.n	8007558 <UART_SetConfig+0x348>
 80074d2:	bf00      	nop
 80074d4:	efff69f3 	.word	0xefff69f3
 80074d8:	40011000 	.word	0x40011000
 80074dc:	40023800 	.word	0x40023800
 80074e0:	40004400 	.word	0x40004400
 80074e4:	40004800 	.word	0x40004800
 80074e8:	40004c00 	.word	0x40004c00
 80074ec:	40005000 	.word	0x40005000
 80074f0:	40011400 	.word	0x40011400
 80074f4:	40007800 	.word	0x40007800
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e02c      	b.n	8007558 <UART_SetConfig+0x348>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a72      	ldr	r2, [pc, #456]	; (80076cc <UART_SetConfig+0x4bc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d125      	bne.n	8007554 <UART_SetConfig+0x344>
 8007508:	4b71      	ldr	r3, [pc, #452]	; (80076d0 <UART_SetConfig+0x4c0>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007512:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007516:	d017      	beq.n	8007548 <UART_SetConfig+0x338>
 8007518:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800751c:	d817      	bhi.n	800754e <UART_SetConfig+0x33e>
 800751e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007522:	d00b      	beq.n	800753c <UART_SetConfig+0x32c>
 8007524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007528:	d811      	bhi.n	800754e <UART_SetConfig+0x33e>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <UART_SetConfig+0x326>
 800752e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007532:	d006      	beq.n	8007542 <UART_SetConfig+0x332>
 8007534:	e00b      	b.n	800754e <UART_SetConfig+0x33e>
 8007536:	2300      	movs	r3, #0
 8007538:	77fb      	strb	r3, [r7, #31]
 800753a:	e00d      	b.n	8007558 <UART_SetConfig+0x348>
 800753c:	2302      	movs	r3, #2
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e00a      	b.n	8007558 <UART_SetConfig+0x348>
 8007542:	2304      	movs	r3, #4
 8007544:	77fb      	strb	r3, [r7, #31]
 8007546:	e007      	b.n	8007558 <UART_SetConfig+0x348>
 8007548:	2308      	movs	r3, #8
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e004      	b.n	8007558 <UART_SetConfig+0x348>
 800754e:	2310      	movs	r3, #16
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e001      	b.n	8007558 <UART_SetConfig+0x348>
 8007554:	2310      	movs	r3, #16
 8007556:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007560:	d15b      	bne.n	800761a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007562:	7ffb      	ldrb	r3, [r7, #31]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d828      	bhi.n	80075ba <UART_SetConfig+0x3aa>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <UART_SetConfig+0x360>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007595 	.word	0x08007595
 8007574:	0800759d 	.word	0x0800759d
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075bb 	.word	0x080075bb
 8007580:	080075ab 	.word	0x080075ab
 8007584:	080075bb 	.word	0x080075bb
 8007588:	080075bb 	.word	0x080075bb
 800758c:	080075bb 	.word	0x080075bb
 8007590:	080075b3 	.word	0x080075b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fe fde2 	bl	800615c <HAL_RCC_GetPCLK1Freq>
 8007598:	61b8      	str	r0, [r7, #24]
        break;
 800759a:	e013      	b.n	80075c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fe fdf2 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 80075a0:	61b8      	str	r0, [r7, #24]
        break;
 80075a2:	e00f      	b.n	80075c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a4:	4b4b      	ldr	r3, [pc, #300]	; (80076d4 <UART_SetConfig+0x4c4>)
 80075a6:	61bb      	str	r3, [r7, #24]
        break;
 80075a8:	e00c      	b.n	80075c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075aa:	f7fe fd05 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 80075ae:	61b8      	str	r0, [r7, #24]
        break;
 80075b0:	e008      	b.n	80075c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b6:	61bb      	str	r3, [r7, #24]
        break;
 80075b8:	e004      	b.n	80075c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	77bb      	strb	r3, [r7, #30]
        break;
 80075c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d074      	beq.n	80076b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d916      	bls.n	8007614 <UART_SetConfig+0x404>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d212      	bcs.n	8007614 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f023 030f 	bic.w	r3, r3, #15
 80075f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	b29a      	uxth	r2, r3
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	4313      	orrs	r3, r2
 8007608:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	89fa      	ldrh	r2, [r7, #14]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	e04f      	b.n	80076b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	77bb      	strb	r3, [r7, #30]
 8007618:	e04c      	b.n	80076b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800761a:	7ffb      	ldrb	r3, [r7, #31]
 800761c:	2b08      	cmp	r3, #8
 800761e:	d828      	bhi.n	8007672 <UART_SetConfig+0x462>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x418>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007655 	.word	0x08007655
 8007630:	0800765d 	.word	0x0800765d
 8007634:	08007673 	.word	0x08007673
 8007638:	08007663 	.word	0x08007663
 800763c:	08007673 	.word	0x08007673
 8007640:	08007673 	.word	0x08007673
 8007644:	08007673 	.word	0x08007673
 8007648:	0800766b 	.word	0x0800766b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fe fd86 	bl	800615c <HAL_RCC_GetPCLK1Freq>
 8007650:	61b8      	str	r0, [r7, #24]
        break;
 8007652:	e013      	b.n	800767c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007654:	f7fe fd96 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8007658:	61b8      	str	r0, [r7, #24]
        break;
 800765a:	e00f      	b.n	800767c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <UART_SetConfig+0x4c4>)
 800765e:	61bb      	str	r3, [r7, #24]
        break;
 8007660:	e00c      	b.n	800767c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007662:	f7fe fca9 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8007666:	61b8      	str	r0, [r7, #24]
        break;
 8007668:	e008      	b.n	800767c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	61bb      	str	r3, [r7, #24]
        break;
 8007670:	e004      	b.n	800767c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	77bb      	strb	r3, [r7, #30]
        break;
 800767a:	bf00      	nop
    }

    if (pclk != 0U)
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d018      	beq.n	80076b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	085a      	lsrs	r2, r3, #1
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	441a      	add	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b0f      	cmp	r3, #15
 800769a:	d909      	bls.n	80076b0 <UART_SetConfig+0x4a0>
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a2:	d205      	bcs.n	80076b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	e001      	b.n	80076b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80076c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40007c00 	.word	0x40007c00
 80076d0:	40023800 	.word	0x40023800
 80076d4:	00f42400 	.word	0x00f42400

080076d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00a      	beq.n	8007702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01a      	beq.n	80077ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077d6:	d10a      	bne.n	80077ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800782c:	f7fc f81a 	bl	8003864 <HAL_GetTick>
 8007830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b08      	cmp	r3, #8
 800783e:	d10e      	bne.n	800785e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f81b 	bl	800788a <UART_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e011      	b.n	8007882 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b09c      	sub	sp, #112	; 0x70
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	603b      	str	r3, [r7, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789a:	e0a7      	b.n	80079ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	f000 80a3 	beq.w	80079ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a6:	f7fb ffdd 	bl	8003864 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <UART_WaitOnFlagUntilTimeout+0x32>
 80078b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d13f      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d0:	667b      	str	r3, [r7, #100]	; 0x64
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e6      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	663b      	str	r3, [r7, #96]	; 0x60
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800790e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800791c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e068      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d050      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007958:	d148      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007962:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
 8007984:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	613b      	str	r3, [r7, #16]
   return(result);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079b6:	623a      	str	r2, [r7, #32]
 80079b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	69f9      	ldr	r1, [r7, #28]
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e010      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69da      	ldr	r2, [r3, #28]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	bf0c      	ite	eq
 80079fc:	2301      	moveq	r3, #1
 80079fe:	2300      	movne	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	f43f af48 	beq.w	800789c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3770      	adds	r7, #112	; 0x70
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d121      	bne.n	8007a6e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b27      	ldr	r3, [pc, #156]	; (8007acc <FMC_SDRAM_Init+0xb4>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	6851      	ldr	r1, [r2, #4]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	6892      	ldr	r2, [r2, #8]
 8007a3a:	4311      	orrs	r1, r2
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68d2      	ldr	r2, [r2, #12]
 8007a40:	4311      	orrs	r1, r2
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	6912      	ldr	r2, [r2, #16]
 8007a46:	4311      	orrs	r1, r2
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	6952      	ldr	r2, [r2, #20]
 8007a4c:	4311      	orrs	r1, r2
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	6992      	ldr	r2, [r2, #24]
 8007a52:	4311      	orrs	r1, r2
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	69d2      	ldr	r2, [r2, #28]
 8007a58:	4311      	orrs	r1, r2
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	6a12      	ldr	r2, [r2, #32]
 8007a5e:	4311      	orrs	r1, r2
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a64:	430a      	orrs	r2, r1
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	e026      	b.n	8007abc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	69d9      	ldr	r1, [r3, #28]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	4319      	orrs	r1, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	430b      	orrs	r3, r1
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <FMC_SDRAM_Init+0xb4>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	6851      	ldr	r1, [r2, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	6892      	ldr	r2, [r2, #8]
 8007a9c:	4311      	orrs	r1, r2
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	68d2      	ldr	r2, [r2, #12]
 8007aa2:	4311      	orrs	r1, r2
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	6912      	ldr	r2, [r2, #16]
 8007aa8:	4311      	orrs	r1, r2
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	6952      	ldr	r2, [r2, #20]
 8007aae:	4311      	orrs	r1, r2
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	6992      	ldr	r2, [r2, #24]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	ffff8000 	.word	0xffff8000

08007ad0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d128      	bne.n	8007b34 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1e59      	subs	r1, r3, #1
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	4319      	orrs	r1, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	4319      	orrs	r1, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	031b      	lsls	r3, r3, #12
 8007b0c:	4319      	orrs	r1, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	4319      	orrs	r1, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	051b      	lsls	r3, r3, #20
 8007b20:	4319      	orrs	r1, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	609a      	str	r2, [r3, #8]
 8007b32:	e02d      	b.n	8007b90 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <FMC_SDRAM_Timing_Init+0xd0>)
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	68d2      	ldr	r2, [r2, #12]
 8007b40:	3a01      	subs	r2, #1
 8007b42:	0311      	lsls	r1, r2, #12
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	6952      	ldr	r2, [r2, #20]
 8007b48:	3a01      	subs	r2, #1
 8007b4a:	0512      	lsls	r2, r2, #20
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	1e59      	subs	r1, r3, #1
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	4319      	orrs	r1, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	4319      	orrs	r1, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	4319      	orrs	r1, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	ff0f0fff 	.word	0xff0f0fff

08007ba4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <FMC_SDRAM_SendCommand+0x44>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	6811      	ldr	r1, [r2, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	6852      	ldr	r2, [r2, #4]
 8007bc0:	4311      	orrs	r1, r2
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	6892      	ldr	r2, [r2, #8]
 8007bc6:	3a01      	subs	r2, #1
 8007bc8:	0152      	lsls	r2, r2, #5
 8007bca:	4311      	orrs	r1, r2
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	68d2      	ldr	r2, [r2, #12]
 8007bd0:	0252      	lsls	r2, r2, #9
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	ffc00000 	.word	0xffc00000

08007bec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	0052      	lsls	r2, r2, #1
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	ffffc001 	.word	0xffffc001

08007c1c <__errno>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	; (8007c24 <__errno+0x8>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000044 	.word	0x20000044

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4d0d      	ldr	r5, [pc, #52]	; (8007c60 <__libc_init_array+0x38>)
 8007c2c:	4c0d      	ldr	r4, [pc, #52]	; (8007c64 <__libc_init_array+0x3c>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	2600      	movs	r6, #0
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	4d0b      	ldr	r5, [pc, #44]	; (8007c68 <__libc_init_array+0x40>)
 8007c3a:	4c0c      	ldr	r4, [pc, #48]	; (8007c6c <__libc_init_array+0x44>)
 8007c3c:	f000 fc8e 	bl	800855c <_init>
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	2600      	movs	r6, #0
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	0800a114 	.word	0x0800a114
 8007c64:	0800a114 	.word	0x0800a114
 8007c68:	0800a114 	.word	0x0800a114
 8007c6c:	0800a118 	.word	0x0800a118

08007c70 <memset>:
 8007c70:	4402      	add	r2, r0
 8007c72:	4603      	mov	r3, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <siprintf>:
 8007c80:	b40e      	push	{r1, r2, r3}
 8007c82:	b500      	push	{lr}
 8007c84:	b09c      	sub	sp, #112	; 0x70
 8007c86:	ab1d      	add	r3, sp, #116	; 0x74
 8007c88:	9002      	str	r0, [sp, #8]
 8007c8a:	9006      	str	r0, [sp, #24]
 8007c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c90:	4809      	ldr	r0, [pc, #36]	; (8007cb8 <siprintf+0x38>)
 8007c92:	9107      	str	r1, [sp, #28]
 8007c94:	9104      	str	r1, [sp, #16]
 8007c96:	4909      	ldr	r1, [pc, #36]	; (8007cbc <siprintf+0x3c>)
 8007c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9c:	9105      	str	r1, [sp, #20]
 8007c9e:	6800      	ldr	r0, [r0, #0]
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	a902      	add	r1, sp, #8
 8007ca4:	f000 f868 	bl	8007d78 <_svfiprintf_r>
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	b01c      	add	sp, #112	; 0x70
 8007cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb4:	b003      	add	sp, #12
 8007cb6:	4770      	bx	lr
 8007cb8:	20000044 	.word	0x20000044
 8007cbc:	ffff0208 	.word	0xffff0208

08007cc0 <__ssputs_r>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	688e      	ldr	r6, [r1, #8]
 8007cc6:	429e      	cmp	r6, r3
 8007cc8:	4682      	mov	sl, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4690      	mov	r8, r2
 8007cce:	461f      	mov	r7, r3
 8007cd0:	d838      	bhi.n	8007d44 <__ssputs_r+0x84>
 8007cd2:	898a      	ldrh	r2, [r1, #12]
 8007cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd8:	d032      	beq.n	8007d40 <__ssputs_r+0x80>
 8007cda:	6825      	ldr	r5, [r4, #0]
 8007cdc:	6909      	ldr	r1, [r1, #16]
 8007cde:	eba5 0901 	sub.w	r9, r5, r1
 8007ce2:	6965      	ldr	r5, [r4, #20]
 8007ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cec:	3301      	adds	r3, #1
 8007cee:	444b      	add	r3, r9
 8007cf0:	106d      	asrs	r5, r5, #1
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	bf38      	it	cc
 8007cf6:	461d      	movcc	r5, r3
 8007cf8:	0553      	lsls	r3, r2, #21
 8007cfa:	d531      	bpl.n	8007d60 <__ssputs_r+0xa0>
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f000 fb63 	bl	80083c8 <_malloc_r>
 8007d02:	4606      	mov	r6, r0
 8007d04:	b950      	cbnz	r0, 8007d1c <__ssputs_r+0x5c>
 8007d06:	230c      	movs	r3, #12
 8007d08:	f8ca 3000 	str.w	r3, [sl]
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	6921      	ldr	r1, [r4, #16]
 8007d1e:	464a      	mov	r2, r9
 8007d20:	f000 fabe 	bl	80082a0 <memcpy>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	6126      	str	r6, [r4, #16]
 8007d32:	6165      	str	r5, [r4, #20]
 8007d34:	444e      	add	r6, r9
 8007d36:	eba5 0509 	sub.w	r5, r5, r9
 8007d3a:	6026      	str	r6, [r4, #0]
 8007d3c:	60a5      	str	r5, [r4, #8]
 8007d3e:	463e      	mov	r6, r7
 8007d40:	42be      	cmp	r6, r7
 8007d42:	d900      	bls.n	8007d46 <__ssputs_r+0x86>
 8007d44:	463e      	mov	r6, r7
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	4632      	mov	r2, r6
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	f000 fab6 	bl	80082bc <memmove>
 8007d50:	68a3      	ldr	r3, [r4, #8]
 8007d52:	1b9b      	subs	r3, r3, r6
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	4433      	add	r3, r6
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e7db      	b.n	8007d18 <__ssputs_r+0x58>
 8007d60:	462a      	mov	r2, r5
 8007d62:	f000 fba5 	bl	80084b0 <_realloc_r>
 8007d66:	4606      	mov	r6, r0
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d1e1      	bne.n	8007d30 <__ssputs_r+0x70>
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f000 fabe 	bl	80082f0 <_free_r>
 8007d74:	e7c7      	b.n	8007d06 <__ssputs_r+0x46>
	...

08007d78 <_svfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	4698      	mov	r8, r3
 8007d7e:	898b      	ldrh	r3, [r1, #12]
 8007d80:	061b      	lsls	r3, r3, #24
 8007d82:	b09d      	sub	sp, #116	; 0x74
 8007d84:	4607      	mov	r7, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	d50e      	bpl.n	8007daa <_svfiprintf_r+0x32>
 8007d8c:	690b      	ldr	r3, [r1, #16]
 8007d8e:	b963      	cbnz	r3, 8007daa <_svfiprintf_r+0x32>
 8007d90:	2140      	movs	r1, #64	; 0x40
 8007d92:	f000 fb19 	bl	80083c8 <_malloc_r>
 8007d96:	6028      	str	r0, [r5, #0]
 8007d98:	6128      	str	r0, [r5, #16]
 8007d9a:	b920      	cbnz	r0, 8007da6 <_svfiprintf_r+0x2e>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e0d1      	b.n	8007f4a <_svfiprintf_r+0x1d2>
 8007da6:	2340      	movs	r3, #64	; 0x40
 8007da8:	616b      	str	r3, [r5, #20]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9309      	str	r3, [sp, #36]	; 0x24
 8007dae:	2320      	movs	r3, #32
 8007db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db8:	2330      	movs	r3, #48	; 0x30
 8007dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f64 <_svfiprintf_r+0x1ec>
 8007dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc2:	f04f 0901 	mov.w	r9, #1
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	469a      	mov	sl, r3
 8007dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dce:	b10a      	cbz	r2, 8007dd4 <_svfiprintf_r+0x5c>
 8007dd0:	2a25      	cmp	r2, #37	; 0x25
 8007dd2:	d1f9      	bne.n	8007dc8 <_svfiprintf_r+0x50>
 8007dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd8:	d00b      	beq.n	8007df2 <_svfiprintf_r+0x7a>
 8007dda:	465b      	mov	r3, fp
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff ff6d 	bl	8007cc0 <__ssputs_r>
 8007de6:	3001      	adds	r0, #1
 8007de8:	f000 80aa 	beq.w	8007f40 <_svfiprintf_r+0x1c8>
 8007dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dee:	445a      	add	r2, fp
 8007df0:	9209      	str	r2, [sp, #36]	; 0x24
 8007df2:	f89a 3000 	ldrb.w	r3, [sl]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80a2 	beq.w	8007f40 <_svfiprintf_r+0x1c8>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e06:	f10a 0a01 	add.w	sl, sl, #1
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	9307      	str	r3, [sp, #28]
 8007e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e12:	931a      	str	r3, [sp, #104]	; 0x68
 8007e14:	4654      	mov	r4, sl
 8007e16:	2205      	movs	r2, #5
 8007e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1c:	4851      	ldr	r0, [pc, #324]	; (8007f64 <_svfiprintf_r+0x1ec>)
 8007e1e:	f7f8 f9f7 	bl	8000210 <memchr>
 8007e22:	9a04      	ldr	r2, [sp, #16]
 8007e24:	b9d8      	cbnz	r0, 8007e5e <_svfiprintf_r+0xe6>
 8007e26:	06d0      	lsls	r0, r2, #27
 8007e28:	bf44      	itt	mi
 8007e2a:	2320      	movmi	r3, #32
 8007e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e30:	0711      	lsls	r1, r2, #28
 8007e32:	bf44      	itt	mi
 8007e34:	232b      	movmi	r3, #43	; 0x2b
 8007e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e40:	d015      	beq.n	8007e6e <_svfiprintf_r+0xf6>
 8007e42:	9a07      	ldr	r2, [sp, #28]
 8007e44:	4654      	mov	r4, sl
 8007e46:	2000      	movs	r0, #0
 8007e48:	f04f 0c0a 	mov.w	ip, #10
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e52:	3b30      	subs	r3, #48	; 0x30
 8007e54:	2b09      	cmp	r3, #9
 8007e56:	d94e      	bls.n	8007ef6 <_svfiprintf_r+0x17e>
 8007e58:	b1b0      	cbz	r0, 8007e88 <_svfiprintf_r+0x110>
 8007e5a:	9207      	str	r2, [sp, #28]
 8007e5c:	e014      	b.n	8007e88 <_svfiprintf_r+0x110>
 8007e5e:	eba0 0308 	sub.w	r3, r0, r8
 8007e62:	fa09 f303 	lsl.w	r3, r9, r3
 8007e66:	4313      	orrs	r3, r2
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	46a2      	mov	sl, r4
 8007e6c:	e7d2      	b.n	8007e14 <_svfiprintf_r+0x9c>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	1d19      	adds	r1, r3, #4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	9103      	str	r1, [sp, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfbb      	ittet	lt
 8007e7a:	425b      	neglt	r3, r3
 8007e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e80:	9307      	strge	r3, [sp, #28]
 8007e82:	9307      	strlt	r3, [sp, #28]
 8007e84:	bfb8      	it	lt
 8007e86:	9204      	strlt	r2, [sp, #16]
 8007e88:	7823      	ldrb	r3, [r4, #0]
 8007e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8c:	d10c      	bne.n	8007ea8 <_svfiprintf_r+0x130>
 8007e8e:	7863      	ldrb	r3, [r4, #1]
 8007e90:	2b2a      	cmp	r3, #42	; 0x2a
 8007e92:	d135      	bne.n	8007f00 <_svfiprintf_r+0x188>
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	1d1a      	adds	r2, r3, #4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	9203      	str	r2, [sp, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfb8      	it	lt
 8007ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea4:	3402      	adds	r4, #2
 8007ea6:	9305      	str	r3, [sp, #20]
 8007ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f74 <_svfiprintf_r+0x1fc>
 8007eac:	7821      	ldrb	r1, [r4, #0]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	f7f8 f9ad 	bl	8000210 <memchr>
 8007eb6:	b140      	cbz	r0, 8007eca <_svfiprintf_r+0x152>
 8007eb8:	2340      	movs	r3, #64	; 0x40
 8007eba:	eba0 000a 	sub.w	r0, r0, sl
 8007ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	4303      	orrs	r3, r0
 8007ec6:	3401      	adds	r4, #1
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4826      	ldr	r0, [pc, #152]	; (8007f68 <_svfiprintf_r+0x1f0>)
 8007ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ed4:	2206      	movs	r2, #6
 8007ed6:	f7f8 f99b 	bl	8000210 <memchr>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d038      	beq.n	8007f50 <_svfiprintf_r+0x1d8>
 8007ede:	4b23      	ldr	r3, [pc, #140]	; (8007f6c <_svfiprintf_r+0x1f4>)
 8007ee0:	bb1b      	cbnz	r3, 8007f2a <_svfiprintf_r+0x1b2>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	3308      	adds	r3, #8
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef0:	4433      	add	r3, r6
 8007ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef4:	e767      	b.n	8007dc6 <_svfiprintf_r+0x4e>
 8007ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007efa:	460c      	mov	r4, r1
 8007efc:	2001      	movs	r0, #1
 8007efe:	e7a5      	b.n	8007e4c <_svfiprintf_r+0xd4>
 8007f00:	2300      	movs	r3, #0
 8007f02:	3401      	adds	r4, #1
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	4619      	mov	r1, r3
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f12:	3a30      	subs	r2, #48	; 0x30
 8007f14:	2a09      	cmp	r2, #9
 8007f16:	d903      	bls.n	8007f20 <_svfiprintf_r+0x1a8>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c5      	beq.n	8007ea8 <_svfiprintf_r+0x130>
 8007f1c:	9105      	str	r1, [sp, #20]
 8007f1e:	e7c3      	b.n	8007ea8 <_svfiprintf_r+0x130>
 8007f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f24:	4604      	mov	r4, r0
 8007f26:	2301      	movs	r3, #1
 8007f28:	e7f0      	b.n	8007f0c <_svfiprintf_r+0x194>
 8007f2a:	ab03      	add	r3, sp, #12
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <_svfiprintf_r+0x1f8>)
 8007f32:	a904      	add	r1, sp, #16
 8007f34:	4638      	mov	r0, r7
 8007f36:	f3af 8000 	nop.w
 8007f3a:	1c42      	adds	r2, r0, #1
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	d1d6      	bne.n	8007eee <_svfiprintf_r+0x176>
 8007f40:	89ab      	ldrh	r3, [r5, #12]
 8007f42:	065b      	lsls	r3, r3, #25
 8007f44:	f53f af2c 	bmi.w	8007da0 <_svfiprintf_r+0x28>
 8007f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f4a:	b01d      	add	sp, #116	; 0x74
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	ab03      	add	r3, sp, #12
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	462a      	mov	r2, r5
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <_svfiprintf_r+0x1f8>)
 8007f58:	a904      	add	r1, sp, #16
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f000 f87a 	bl	8008054 <_printf_i>
 8007f60:	e7eb      	b.n	8007f3a <_svfiprintf_r+0x1c2>
 8007f62:	bf00      	nop
 8007f64:	0800a0d8 	.word	0x0800a0d8
 8007f68:	0800a0e2 	.word	0x0800a0e2
 8007f6c:	00000000 	.word	0x00000000
 8007f70:	08007cc1 	.word	0x08007cc1
 8007f74:	0800a0de 	.word	0x0800a0de

08007f78 <_printf_common>:
 8007f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	4699      	mov	r9, r3
 8007f80:	688a      	ldr	r2, [r1, #8]
 8007f82:	690b      	ldr	r3, [r1, #16]
 8007f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	bfb8      	it	lt
 8007f8c:	4613      	movlt	r3, r2
 8007f8e:	6033      	str	r3, [r6, #0]
 8007f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f94:	4607      	mov	r7, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	b10a      	cbz	r2, 8007f9e <_printf_common+0x26>
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	0699      	lsls	r1, r3, #26
 8007fa2:	bf42      	ittt	mi
 8007fa4:	6833      	ldrmi	r3, [r6, #0]
 8007fa6:	3302      	addmi	r3, #2
 8007fa8:	6033      	strmi	r3, [r6, #0]
 8007faa:	6825      	ldr	r5, [r4, #0]
 8007fac:	f015 0506 	ands.w	r5, r5, #6
 8007fb0:	d106      	bne.n	8007fc0 <_printf_common+0x48>
 8007fb2:	f104 0a19 	add.w	sl, r4, #25
 8007fb6:	68e3      	ldr	r3, [r4, #12]
 8007fb8:	6832      	ldr	r2, [r6, #0]
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	42ab      	cmp	r3, r5
 8007fbe:	dc26      	bgt.n	800800e <_printf_common+0x96>
 8007fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fc4:	1e13      	subs	r3, r2, #0
 8007fc6:	6822      	ldr	r2, [r4, #0]
 8007fc8:	bf18      	it	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	0692      	lsls	r2, r2, #26
 8007fce:	d42b      	bmi.n	8008028 <_printf_common+0xb0>
 8007fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	47c0      	blx	r8
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d01e      	beq.n	800801c <_printf_common+0xa4>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	68e5      	ldr	r5, [r4, #12]
 8007fe2:	6832      	ldr	r2, [r6, #0]
 8007fe4:	f003 0306 	and.w	r3, r3, #6
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	bf08      	it	eq
 8007fec:	1aad      	subeq	r5, r5, r2
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	bf0c      	ite	eq
 8007ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff8:	2500      	movne	r5, #0
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	bfc4      	itt	gt
 8007ffe:	1a9b      	subgt	r3, r3, r2
 8008000:	18ed      	addgt	r5, r5, r3
 8008002:	2600      	movs	r6, #0
 8008004:	341a      	adds	r4, #26
 8008006:	42b5      	cmp	r5, r6
 8008008:	d11a      	bne.n	8008040 <_printf_common+0xc8>
 800800a:	2000      	movs	r0, #0
 800800c:	e008      	b.n	8008020 <_printf_common+0xa8>
 800800e:	2301      	movs	r3, #1
 8008010:	4652      	mov	r2, sl
 8008012:	4649      	mov	r1, r9
 8008014:	4638      	mov	r0, r7
 8008016:	47c0      	blx	r8
 8008018:	3001      	adds	r0, #1
 800801a:	d103      	bne.n	8008024 <_printf_common+0xac>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008024:	3501      	adds	r5, #1
 8008026:	e7c6      	b.n	8007fb6 <_printf_common+0x3e>
 8008028:	18e1      	adds	r1, r4, r3
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	2030      	movs	r0, #48	; 0x30
 800802e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008032:	4422      	add	r2, r4
 8008034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800803c:	3302      	adds	r3, #2
 800803e:	e7c7      	b.n	8007fd0 <_printf_common+0x58>
 8008040:	2301      	movs	r3, #1
 8008042:	4622      	mov	r2, r4
 8008044:	4649      	mov	r1, r9
 8008046:	4638      	mov	r0, r7
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d0e6      	beq.n	800801c <_printf_common+0xa4>
 800804e:	3601      	adds	r6, #1
 8008050:	e7d9      	b.n	8008006 <_printf_common+0x8e>
	...

08008054 <_printf_i>:
 8008054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	7e0f      	ldrb	r7, [r1, #24]
 800805a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800805c:	2f78      	cmp	r7, #120	; 0x78
 800805e:	4691      	mov	r9, r2
 8008060:	4680      	mov	r8, r0
 8008062:	460c      	mov	r4, r1
 8008064:	469a      	mov	sl, r3
 8008066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800806a:	d807      	bhi.n	800807c <_printf_i+0x28>
 800806c:	2f62      	cmp	r7, #98	; 0x62
 800806e:	d80a      	bhi.n	8008086 <_printf_i+0x32>
 8008070:	2f00      	cmp	r7, #0
 8008072:	f000 80d8 	beq.w	8008226 <_printf_i+0x1d2>
 8008076:	2f58      	cmp	r7, #88	; 0x58
 8008078:	f000 80a3 	beq.w	80081c2 <_printf_i+0x16e>
 800807c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008084:	e03a      	b.n	80080fc <_printf_i+0xa8>
 8008086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800808a:	2b15      	cmp	r3, #21
 800808c:	d8f6      	bhi.n	800807c <_printf_i+0x28>
 800808e:	a101      	add	r1, pc, #4	; (adr r1, 8008094 <_printf_i+0x40>)
 8008090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008094:	080080ed 	.word	0x080080ed
 8008098:	08008101 	.word	0x08008101
 800809c:	0800807d 	.word	0x0800807d
 80080a0:	0800807d 	.word	0x0800807d
 80080a4:	0800807d 	.word	0x0800807d
 80080a8:	0800807d 	.word	0x0800807d
 80080ac:	08008101 	.word	0x08008101
 80080b0:	0800807d 	.word	0x0800807d
 80080b4:	0800807d 	.word	0x0800807d
 80080b8:	0800807d 	.word	0x0800807d
 80080bc:	0800807d 	.word	0x0800807d
 80080c0:	0800820d 	.word	0x0800820d
 80080c4:	08008131 	.word	0x08008131
 80080c8:	080081ef 	.word	0x080081ef
 80080cc:	0800807d 	.word	0x0800807d
 80080d0:	0800807d 	.word	0x0800807d
 80080d4:	0800822f 	.word	0x0800822f
 80080d8:	0800807d 	.word	0x0800807d
 80080dc:	08008131 	.word	0x08008131
 80080e0:	0800807d 	.word	0x0800807d
 80080e4:	0800807d 	.word	0x0800807d
 80080e8:	080081f7 	.word	0x080081f7
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	1d1a      	adds	r2, r3, #4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	602a      	str	r2, [r5, #0]
 80080f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080fc:	2301      	movs	r3, #1
 80080fe:	e0a3      	b.n	8008248 <_printf_i+0x1f4>
 8008100:	6820      	ldr	r0, [r4, #0]
 8008102:	6829      	ldr	r1, [r5, #0]
 8008104:	0606      	lsls	r6, r0, #24
 8008106:	f101 0304 	add.w	r3, r1, #4
 800810a:	d50a      	bpl.n	8008122 <_printf_i+0xce>
 800810c:	680e      	ldr	r6, [r1, #0]
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	2e00      	cmp	r6, #0
 8008112:	da03      	bge.n	800811c <_printf_i+0xc8>
 8008114:	232d      	movs	r3, #45	; 0x2d
 8008116:	4276      	negs	r6, r6
 8008118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811c:	485e      	ldr	r0, [pc, #376]	; (8008298 <_printf_i+0x244>)
 800811e:	230a      	movs	r3, #10
 8008120:	e019      	b.n	8008156 <_printf_i+0x102>
 8008122:	680e      	ldr	r6, [r1, #0]
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	f010 0f40 	tst.w	r0, #64	; 0x40
 800812a:	bf18      	it	ne
 800812c:	b236      	sxthne	r6, r6
 800812e:	e7ef      	b.n	8008110 <_printf_i+0xbc>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	1d19      	adds	r1, r3, #4
 8008136:	6029      	str	r1, [r5, #0]
 8008138:	0601      	lsls	r1, r0, #24
 800813a:	d501      	bpl.n	8008140 <_printf_i+0xec>
 800813c:	681e      	ldr	r6, [r3, #0]
 800813e:	e002      	b.n	8008146 <_printf_i+0xf2>
 8008140:	0646      	lsls	r6, r0, #25
 8008142:	d5fb      	bpl.n	800813c <_printf_i+0xe8>
 8008144:	881e      	ldrh	r6, [r3, #0]
 8008146:	4854      	ldr	r0, [pc, #336]	; (8008298 <_printf_i+0x244>)
 8008148:	2f6f      	cmp	r7, #111	; 0x6f
 800814a:	bf0c      	ite	eq
 800814c:	2308      	moveq	r3, #8
 800814e:	230a      	movne	r3, #10
 8008150:	2100      	movs	r1, #0
 8008152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008156:	6865      	ldr	r5, [r4, #4]
 8008158:	60a5      	str	r5, [r4, #8]
 800815a:	2d00      	cmp	r5, #0
 800815c:	bfa2      	ittt	ge
 800815e:	6821      	ldrge	r1, [r4, #0]
 8008160:	f021 0104 	bicge.w	r1, r1, #4
 8008164:	6021      	strge	r1, [r4, #0]
 8008166:	b90e      	cbnz	r6, 800816c <_printf_i+0x118>
 8008168:	2d00      	cmp	r5, #0
 800816a:	d04d      	beq.n	8008208 <_printf_i+0x1b4>
 800816c:	4615      	mov	r5, r2
 800816e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008172:	fb03 6711 	mls	r7, r3, r1, r6
 8008176:	5dc7      	ldrb	r7, [r0, r7]
 8008178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800817c:	4637      	mov	r7, r6
 800817e:	42bb      	cmp	r3, r7
 8008180:	460e      	mov	r6, r1
 8008182:	d9f4      	bls.n	800816e <_printf_i+0x11a>
 8008184:	2b08      	cmp	r3, #8
 8008186:	d10b      	bne.n	80081a0 <_printf_i+0x14c>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	07de      	lsls	r6, r3, #31
 800818c:	d508      	bpl.n	80081a0 <_printf_i+0x14c>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	6861      	ldr	r1, [r4, #4]
 8008192:	4299      	cmp	r1, r3
 8008194:	bfde      	ittt	le
 8008196:	2330      	movle	r3, #48	; 0x30
 8008198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800819c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081a0:	1b52      	subs	r2, r2, r5
 80081a2:	6122      	str	r2, [r4, #16]
 80081a4:	f8cd a000 	str.w	sl, [sp]
 80081a8:	464b      	mov	r3, r9
 80081aa:	aa03      	add	r2, sp, #12
 80081ac:	4621      	mov	r1, r4
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7ff fee2 	bl	8007f78 <_printf_common>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d14c      	bne.n	8008252 <_printf_i+0x1fe>
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	b004      	add	sp, #16
 80081be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c2:	4835      	ldr	r0, [pc, #212]	; (8008298 <_printf_i+0x244>)
 80081c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081c8:	6829      	ldr	r1, [r5, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80081d0:	6029      	str	r1, [r5, #0]
 80081d2:	061d      	lsls	r5, r3, #24
 80081d4:	d514      	bpl.n	8008200 <_printf_i+0x1ac>
 80081d6:	07df      	lsls	r7, r3, #31
 80081d8:	bf44      	itt	mi
 80081da:	f043 0320 	orrmi.w	r3, r3, #32
 80081de:	6023      	strmi	r3, [r4, #0]
 80081e0:	b91e      	cbnz	r6, 80081ea <_printf_i+0x196>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	f023 0320 	bic.w	r3, r3, #32
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	2310      	movs	r3, #16
 80081ec:	e7b0      	b.n	8008150 <_printf_i+0xfc>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	f043 0320 	orr.w	r3, r3, #32
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	2378      	movs	r3, #120	; 0x78
 80081f8:	4828      	ldr	r0, [pc, #160]	; (800829c <_printf_i+0x248>)
 80081fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081fe:	e7e3      	b.n	80081c8 <_printf_i+0x174>
 8008200:	0659      	lsls	r1, r3, #25
 8008202:	bf48      	it	mi
 8008204:	b2b6      	uxthmi	r6, r6
 8008206:	e7e6      	b.n	80081d6 <_printf_i+0x182>
 8008208:	4615      	mov	r5, r2
 800820a:	e7bb      	b.n	8008184 <_printf_i+0x130>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	6826      	ldr	r6, [r4, #0]
 8008210:	6961      	ldr	r1, [r4, #20]
 8008212:	1d18      	adds	r0, r3, #4
 8008214:	6028      	str	r0, [r5, #0]
 8008216:	0635      	lsls	r5, r6, #24
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	d501      	bpl.n	8008220 <_printf_i+0x1cc>
 800821c:	6019      	str	r1, [r3, #0]
 800821e:	e002      	b.n	8008226 <_printf_i+0x1d2>
 8008220:	0670      	lsls	r0, r6, #25
 8008222:	d5fb      	bpl.n	800821c <_printf_i+0x1c8>
 8008224:	8019      	strh	r1, [r3, #0]
 8008226:	2300      	movs	r3, #0
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	4615      	mov	r5, r2
 800822c:	e7ba      	b.n	80081a4 <_printf_i+0x150>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	1d1a      	adds	r2, r3, #4
 8008232:	602a      	str	r2, [r5, #0]
 8008234:	681d      	ldr	r5, [r3, #0]
 8008236:	6862      	ldr	r2, [r4, #4]
 8008238:	2100      	movs	r1, #0
 800823a:	4628      	mov	r0, r5
 800823c:	f7f7 ffe8 	bl	8000210 <memchr>
 8008240:	b108      	cbz	r0, 8008246 <_printf_i+0x1f2>
 8008242:	1b40      	subs	r0, r0, r5
 8008244:	6060      	str	r0, [r4, #4]
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	2300      	movs	r3, #0
 800824c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008250:	e7a8      	b.n	80081a4 <_printf_i+0x150>
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	462a      	mov	r2, r5
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	47d0      	blx	sl
 800825c:	3001      	adds	r0, #1
 800825e:	d0ab      	beq.n	80081b8 <_printf_i+0x164>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	079b      	lsls	r3, r3, #30
 8008264:	d413      	bmi.n	800828e <_printf_i+0x23a>
 8008266:	68e0      	ldr	r0, [r4, #12]
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	4298      	cmp	r0, r3
 800826c:	bfb8      	it	lt
 800826e:	4618      	movlt	r0, r3
 8008270:	e7a4      	b.n	80081bc <_printf_i+0x168>
 8008272:	2301      	movs	r3, #1
 8008274:	4632      	mov	r2, r6
 8008276:	4649      	mov	r1, r9
 8008278:	4640      	mov	r0, r8
 800827a:	47d0      	blx	sl
 800827c:	3001      	adds	r0, #1
 800827e:	d09b      	beq.n	80081b8 <_printf_i+0x164>
 8008280:	3501      	adds	r5, #1
 8008282:	68e3      	ldr	r3, [r4, #12]
 8008284:	9903      	ldr	r1, [sp, #12]
 8008286:	1a5b      	subs	r3, r3, r1
 8008288:	42ab      	cmp	r3, r5
 800828a:	dcf2      	bgt.n	8008272 <_printf_i+0x21e>
 800828c:	e7eb      	b.n	8008266 <_printf_i+0x212>
 800828e:	2500      	movs	r5, #0
 8008290:	f104 0619 	add.w	r6, r4, #25
 8008294:	e7f5      	b.n	8008282 <_printf_i+0x22e>
 8008296:	bf00      	nop
 8008298:	0800a0e9 	.word	0x0800a0e9
 800829c:	0800a0fa 	.word	0x0800a0fa

080082a0 <memcpy>:
 80082a0:	440a      	add	r2, r1
 80082a2:	4291      	cmp	r1, r2
 80082a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a8:	d100      	bne.n	80082ac <memcpy+0xc>
 80082aa:	4770      	bx	lr
 80082ac:	b510      	push	{r4, lr}
 80082ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b6:	4291      	cmp	r1, r2
 80082b8:	d1f9      	bne.n	80082ae <memcpy+0xe>
 80082ba:	bd10      	pop	{r4, pc}

080082bc <memmove>:
 80082bc:	4288      	cmp	r0, r1
 80082be:	b510      	push	{r4, lr}
 80082c0:	eb01 0402 	add.w	r4, r1, r2
 80082c4:	d902      	bls.n	80082cc <memmove+0x10>
 80082c6:	4284      	cmp	r4, r0
 80082c8:	4623      	mov	r3, r4
 80082ca:	d807      	bhi.n	80082dc <memmove+0x20>
 80082cc:	1e43      	subs	r3, r0, #1
 80082ce:	42a1      	cmp	r1, r4
 80082d0:	d008      	beq.n	80082e4 <memmove+0x28>
 80082d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082da:	e7f8      	b.n	80082ce <memmove+0x12>
 80082dc:	4402      	add	r2, r0
 80082de:	4601      	mov	r1, r0
 80082e0:	428a      	cmp	r2, r1
 80082e2:	d100      	bne.n	80082e6 <memmove+0x2a>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ee:	e7f7      	b.n	80082e0 <memmove+0x24>

080082f0 <_free_r>:
 80082f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082f2:	2900      	cmp	r1, #0
 80082f4:	d044      	beq.n	8008380 <_free_r+0x90>
 80082f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fa:	9001      	str	r0, [sp, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008302:	bfb8      	it	lt
 8008304:	18e4      	addlt	r4, r4, r3
 8008306:	f000 f913 	bl	8008530 <__malloc_lock>
 800830a:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <_free_r+0x94>)
 800830c:	9801      	ldr	r0, [sp, #4]
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	b933      	cbnz	r3, 8008320 <_free_r+0x30>
 8008312:	6063      	str	r3, [r4, #4]
 8008314:	6014      	str	r4, [r2, #0]
 8008316:	b003      	add	sp, #12
 8008318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800831c:	f000 b90e 	b.w	800853c <__malloc_unlock>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d908      	bls.n	8008336 <_free_r+0x46>
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	1961      	adds	r1, r4, r5
 8008328:	428b      	cmp	r3, r1
 800832a:	bf01      	itttt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	1949      	addeq	r1, r1, r5
 8008332:	6021      	streq	r1, [r4, #0]
 8008334:	e7ed      	b.n	8008312 <_free_r+0x22>
 8008336:	461a      	mov	r2, r3
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b10b      	cbz	r3, 8008340 <_free_r+0x50>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d9fa      	bls.n	8008336 <_free_r+0x46>
 8008340:	6811      	ldr	r1, [r2, #0]
 8008342:	1855      	adds	r5, r2, r1
 8008344:	42a5      	cmp	r5, r4
 8008346:	d10b      	bne.n	8008360 <_free_r+0x70>
 8008348:	6824      	ldr	r4, [r4, #0]
 800834a:	4421      	add	r1, r4
 800834c:	1854      	adds	r4, r2, r1
 800834e:	42a3      	cmp	r3, r4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	d1e0      	bne.n	8008316 <_free_r+0x26>
 8008354:	681c      	ldr	r4, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	4421      	add	r1, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	e7da      	b.n	8008316 <_free_r+0x26>
 8008360:	d902      	bls.n	8008368 <_free_r+0x78>
 8008362:	230c      	movs	r3, #12
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	e7d6      	b.n	8008316 <_free_r+0x26>
 8008368:	6825      	ldr	r5, [r4, #0]
 800836a:	1961      	adds	r1, r4, r5
 800836c:	428b      	cmp	r3, r1
 800836e:	bf04      	itt	eq
 8008370:	6819      	ldreq	r1, [r3, #0]
 8008372:	685b      	ldreq	r3, [r3, #4]
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	bf04      	itt	eq
 8008378:	1949      	addeq	r1, r1, r5
 800837a:	6021      	streq	r1, [r4, #0]
 800837c:	6054      	str	r4, [r2, #4]
 800837e:	e7ca      	b.n	8008316 <_free_r+0x26>
 8008380:	b003      	add	sp, #12
 8008382:	bd30      	pop	{r4, r5, pc}
 8008384:	20000634 	.word	0x20000634

08008388 <sbrk_aligned>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	4e0e      	ldr	r6, [pc, #56]	; (80083c4 <sbrk_aligned+0x3c>)
 800838c:	460c      	mov	r4, r1
 800838e:	6831      	ldr	r1, [r6, #0]
 8008390:	4605      	mov	r5, r0
 8008392:	b911      	cbnz	r1, 800839a <sbrk_aligned+0x12>
 8008394:	f000 f8bc 	bl	8008510 <_sbrk_r>
 8008398:	6030      	str	r0, [r6, #0]
 800839a:	4621      	mov	r1, r4
 800839c:	4628      	mov	r0, r5
 800839e:	f000 f8b7 	bl	8008510 <_sbrk_r>
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d00a      	beq.n	80083bc <sbrk_aligned+0x34>
 80083a6:	1cc4      	adds	r4, r0, #3
 80083a8:	f024 0403 	bic.w	r4, r4, #3
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d007      	beq.n	80083c0 <sbrk_aligned+0x38>
 80083b0:	1a21      	subs	r1, r4, r0
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f8ac 	bl	8008510 <_sbrk_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d101      	bne.n	80083c0 <sbrk_aligned+0x38>
 80083bc:	f04f 34ff 	mov.w	r4, #4294967295
 80083c0:	4620      	mov	r0, r4
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	20000638 	.word	0x20000638

080083c8 <_malloc_r>:
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	1ccd      	adds	r5, r1, #3
 80083ce:	f025 0503 	bic.w	r5, r5, #3
 80083d2:	3508      	adds	r5, #8
 80083d4:	2d0c      	cmp	r5, #12
 80083d6:	bf38      	it	cc
 80083d8:	250c      	movcc	r5, #12
 80083da:	2d00      	cmp	r5, #0
 80083dc:	4607      	mov	r7, r0
 80083de:	db01      	blt.n	80083e4 <_malloc_r+0x1c>
 80083e0:	42a9      	cmp	r1, r5
 80083e2:	d905      	bls.n	80083f0 <_malloc_r+0x28>
 80083e4:	230c      	movs	r3, #12
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	2600      	movs	r6, #0
 80083ea:	4630      	mov	r0, r6
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	4e2e      	ldr	r6, [pc, #184]	; (80084ac <_malloc_r+0xe4>)
 80083f2:	f000 f89d 	bl	8008530 <__malloc_lock>
 80083f6:	6833      	ldr	r3, [r6, #0]
 80083f8:	461c      	mov	r4, r3
 80083fa:	bb34      	cbnz	r4, 800844a <_malloc_r+0x82>
 80083fc:	4629      	mov	r1, r5
 80083fe:	4638      	mov	r0, r7
 8008400:	f7ff ffc2 	bl	8008388 <sbrk_aligned>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	4604      	mov	r4, r0
 8008408:	d14d      	bne.n	80084a6 <_malloc_r+0xde>
 800840a:	6834      	ldr	r4, [r6, #0]
 800840c:	4626      	mov	r6, r4
 800840e:	2e00      	cmp	r6, #0
 8008410:	d140      	bne.n	8008494 <_malloc_r+0xcc>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	4631      	mov	r1, r6
 8008416:	4638      	mov	r0, r7
 8008418:	eb04 0803 	add.w	r8, r4, r3
 800841c:	f000 f878 	bl	8008510 <_sbrk_r>
 8008420:	4580      	cmp	r8, r0
 8008422:	d13a      	bne.n	800849a <_malloc_r+0xd2>
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	3503      	adds	r5, #3
 8008428:	1a6d      	subs	r5, r5, r1
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	4629      	mov	r1, r5
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ffa5 	bl	8008388 <sbrk_aligned>
 800843e:	3001      	adds	r0, #1
 8008440:	d02b      	beq.n	800849a <_malloc_r+0xd2>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	442b      	add	r3, r5
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	e00e      	b.n	8008468 <_malloc_r+0xa0>
 800844a:	6822      	ldr	r2, [r4, #0]
 800844c:	1b52      	subs	r2, r2, r5
 800844e:	d41e      	bmi.n	800848e <_malloc_r+0xc6>
 8008450:	2a0b      	cmp	r2, #11
 8008452:	d916      	bls.n	8008482 <_malloc_r+0xba>
 8008454:	1961      	adds	r1, r4, r5
 8008456:	42a3      	cmp	r3, r4
 8008458:	6025      	str	r5, [r4, #0]
 800845a:	bf18      	it	ne
 800845c:	6059      	strne	r1, [r3, #4]
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	bf08      	it	eq
 8008462:	6031      	streq	r1, [r6, #0]
 8008464:	5162      	str	r2, [r4, r5]
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	4638      	mov	r0, r7
 800846a:	f104 060b 	add.w	r6, r4, #11
 800846e:	f000 f865 	bl	800853c <__malloc_unlock>
 8008472:	f026 0607 	bic.w	r6, r6, #7
 8008476:	1d23      	adds	r3, r4, #4
 8008478:	1af2      	subs	r2, r6, r3
 800847a:	d0b6      	beq.n	80083ea <_malloc_r+0x22>
 800847c:	1b9b      	subs	r3, r3, r6
 800847e:	50a3      	str	r3, [r4, r2]
 8008480:	e7b3      	b.n	80083ea <_malloc_r+0x22>
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	42a3      	cmp	r3, r4
 8008486:	bf0c      	ite	eq
 8008488:	6032      	streq	r2, [r6, #0]
 800848a:	605a      	strne	r2, [r3, #4]
 800848c:	e7ec      	b.n	8008468 <_malloc_r+0xa0>
 800848e:	4623      	mov	r3, r4
 8008490:	6864      	ldr	r4, [r4, #4]
 8008492:	e7b2      	b.n	80083fa <_malloc_r+0x32>
 8008494:	4634      	mov	r4, r6
 8008496:	6876      	ldr	r6, [r6, #4]
 8008498:	e7b9      	b.n	800840e <_malloc_r+0x46>
 800849a:	230c      	movs	r3, #12
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	4638      	mov	r0, r7
 80084a0:	f000 f84c 	bl	800853c <__malloc_unlock>
 80084a4:	e7a1      	b.n	80083ea <_malloc_r+0x22>
 80084a6:	6025      	str	r5, [r4, #0]
 80084a8:	e7de      	b.n	8008468 <_malloc_r+0xa0>
 80084aa:	bf00      	nop
 80084ac:	20000634 	.word	0x20000634

080084b0 <_realloc_r>:
 80084b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b4:	4680      	mov	r8, r0
 80084b6:	4614      	mov	r4, r2
 80084b8:	460e      	mov	r6, r1
 80084ba:	b921      	cbnz	r1, 80084c6 <_realloc_r+0x16>
 80084bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c0:	4611      	mov	r1, r2
 80084c2:	f7ff bf81 	b.w	80083c8 <_malloc_r>
 80084c6:	b92a      	cbnz	r2, 80084d4 <_realloc_r+0x24>
 80084c8:	f7ff ff12 	bl	80082f0 <_free_r>
 80084cc:	4625      	mov	r5, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d4:	f000 f838 	bl	8008548 <_malloc_usable_size_r>
 80084d8:	4284      	cmp	r4, r0
 80084da:	4607      	mov	r7, r0
 80084dc:	d802      	bhi.n	80084e4 <_realloc_r+0x34>
 80084de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084e2:	d812      	bhi.n	800850a <_realloc_r+0x5a>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4640      	mov	r0, r8
 80084e8:	f7ff ff6e 	bl	80083c8 <_malloc_r>
 80084ec:	4605      	mov	r5, r0
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d0ed      	beq.n	80084ce <_realloc_r+0x1e>
 80084f2:	42bc      	cmp	r4, r7
 80084f4:	4622      	mov	r2, r4
 80084f6:	4631      	mov	r1, r6
 80084f8:	bf28      	it	cs
 80084fa:	463a      	movcs	r2, r7
 80084fc:	f7ff fed0 	bl	80082a0 <memcpy>
 8008500:	4631      	mov	r1, r6
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fef4 	bl	80082f0 <_free_r>
 8008508:	e7e1      	b.n	80084ce <_realloc_r+0x1e>
 800850a:	4635      	mov	r5, r6
 800850c:	e7df      	b.n	80084ce <_realloc_r+0x1e>
	...

08008510 <_sbrk_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	; (800852c <_sbrk_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f9 fb7e 	bl	8001c1c <_sbrk>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_sbrk_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_sbrk_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	2000063c 	.word	0x2000063c

08008530 <__malloc_lock>:
 8008530:	4801      	ldr	r0, [pc, #4]	; (8008538 <__malloc_lock+0x8>)
 8008532:	f000 b811 	b.w	8008558 <__retarget_lock_acquire_recursive>
 8008536:	bf00      	nop
 8008538:	20000640 	.word	0x20000640

0800853c <__malloc_unlock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_unlock+0x8>)
 800853e:	f000 b80c 	b.w	800855a <__retarget_lock_release_recursive>
 8008542:	bf00      	nop
 8008544:	20000640 	.word	0x20000640

08008548 <_malloc_usable_size_r>:
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f18      	subs	r0, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfbc      	itt	lt
 8008552:	580b      	ldrlt	r3, [r1, r0]
 8008554:	18c0      	addlt	r0, r0, r3
 8008556:	4770      	bx	lr

08008558 <__retarget_lock_acquire_recursive>:
 8008558:	4770      	bx	lr

0800855a <__retarget_lock_release_recursive>:
 800855a:	4770      	bx	lr

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
